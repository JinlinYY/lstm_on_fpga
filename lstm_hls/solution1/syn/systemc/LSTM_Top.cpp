// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "LSTM_Top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic LSTM_Top::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic LSTM_Top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> LSTM_Top::ap_ST_fsm_state1 = "1";
const sc_lv<4> LSTM_Top::ap_ST_fsm_state2 = "10";
const sc_lv<4> LSTM_Top::ap_ST_fsm_state3 = "100";
const sc_lv<4> LSTM_Top::ap_ST_fsm_state4 = "1000";
const sc_lv<1> LSTM_Top::ap_const_lv1_0 = "0";
const sc_lv<1> LSTM_Top::ap_const_lv1_1 = "1";
const sc_lv<2> LSTM_Top::ap_const_lv2_0 = "00";
const sc_lv<2> LSTM_Top::ap_const_lv2_2 = "10";
const sc_lv<2> LSTM_Top::ap_const_lv2_3 = "11";
const sc_lv<2> LSTM_Top::ap_const_lv2_1 = "1";
const sc_lv<32> LSTM_Top::ap_const_lv32_1 = "1";
const sc_lv<32> LSTM_Top::ap_const_lv32_2 = "10";
const bool LSTM_Top::ap_const_boolean_0 = false;
const sc_lv<32> LSTM_Top::ap_const_lv32_3 = "11";
const bool LSTM_Top::ap_const_boolean_1 = true;

LSTM_Top::LSTM_Top(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_mnist_lstm_fu_456 = new mnist_lstm("grp_mnist_lstm_fu_456");
    grp_mnist_lstm_fu_456->ap_clk(ap_clk);
    grp_mnist_lstm_fu_456->ap_rst(ap_rst_n_inv);
    grp_mnist_lstm_fu_456->in_r_TDATA(in_data_V_0_data_out);
    grp_mnist_lstm_fu_456->in_r_TKEEP(in_keep_V_0_data_out);
    grp_mnist_lstm_fu_456->in_r_TSTRB(in_strb_V_0_data_out);
    grp_mnist_lstm_fu_456->in_r_TUSER(in_user_V_0_data_out);
    grp_mnist_lstm_fu_456->in_r_TLAST(in_last_V_0_data_out);
    grp_mnist_lstm_fu_456->in_r_TID(in_id_V_0_data_out);
    grp_mnist_lstm_fu_456->in_r_TDEST(in_dest_V_0_data_out);
    grp_mnist_lstm_fu_456->out_r_TDATA(grp_mnist_lstm_fu_456_out_r_TDATA);
    grp_mnist_lstm_fu_456->out_r_TKEEP(grp_mnist_lstm_fu_456_out_r_TKEEP);
    grp_mnist_lstm_fu_456->out_r_TSTRB(grp_mnist_lstm_fu_456_out_r_TSTRB);
    grp_mnist_lstm_fu_456->out_r_TUSER(grp_mnist_lstm_fu_456_out_r_TUSER);
    grp_mnist_lstm_fu_456->out_r_TLAST(grp_mnist_lstm_fu_456_out_r_TLAST);
    grp_mnist_lstm_fu_456->out_r_TID(grp_mnist_lstm_fu_456_out_r_TID);
    grp_mnist_lstm_fu_456->out_r_TDEST(grp_mnist_lstm_fu_456_out_r_TDEST);
    grp_mnist_lstm_fu_456->in_r_TVALID(grp_mnist_lstm_fu_456_in_r_TVALID);
    grp_mnist_lstm_fu_456->in_r_TREADY(grp_mnist_lstm_fu_456_in_r_TREADY);
    grp_mnist_lstm_fu_456->ap_start(grp_mnist_lstm_fu_456_ap_start);
    grp_mnist_lstm_fu_456->out_r_TVALID(grp_mnist_lstm_fu_456_out_r_TVALID);
    grp_mnist_lstm_fu_456->out_r_TREADY(grp_mnist_lstm_fu_456_out_r_TREADY);
    grp_mnist_lstm_fu_456->ap_done(grp_mnist_lstm_fu_456_ap_done);
    grp_mnist_lstm_fu_456->ap_ready(grp_mnist_lstm_fu_456_ap_ready);
    grp_mnist_lstm_fu_456->ap_idle(grp_mnist_lstm_fu_456_ap_idle);
    grp_mnist_lstm_fu_456->ap_continue(grp_mnist_lstm_fu_456_ap_continue);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3_on_subcall_done);
    sensitive << ( ap_sync_grp_mnist_lstm_fu_456_ap_ready );
    sensitive << ( ap_sync_grp_mnist_lstm_fu_456_ap_done );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( out_data_V_1_ack_in );
    sensitive << ( out_keep_V_1_ack_in );
    sensitive << ( out_strb_V_1_ack_in );
    sensitive << ( out_user_V_1_ack_in );
    sensitive << ( out_last_V_1_ack_in );
    sensitive << ( out_id_V_1_ack_in );
    sensitive << ( out_dest_V_1_ack_in );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_grp_mnist_lstm_fu_456_ap_done);
    sensitive << ( grp_mnist_lstm_fu_456_ap_done );
    sensitive << ( ap_sync_reg_grp_mnist_lstm_fu_456_ap_done );

    SC_METHOD(thread_ap_sync_grp_mnist_lstm_fu_456_ap_ready);
    sensitive << ( grp_mnist_lstm_fu_456_ap_ready );
    sensitive << ( ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready );

    SC_METHOD(thread_grp_mnist_lstm_fu_456_ap_continue);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_on_subcall_done );

    SC_METHOD(thread_grp_mnist_lstm_fu_456_ap_start);
    sensitive << ( grp_mnist_lstm_fu_456_ap_start_reg );

    SC_METHOD(thread_grp_mnist_lstm_fu_456_in_r_TVALID);
    sensitive << ( in_dest_V_0_state );

    SC_METHOD(thread_grp_mnist_lstm_fu_456_out_r_TREADY);
    sensitive << ( out_data_V_1_ack_in );
    sensitive << ( out_keep_V_1_ack_in );
    sensitive << ( out_strb_V_1_ack_in );
    sensitive << ( out_user_V_1_ack_in );
    sensitive << ( out_last_V_1_ack_in );
    sensitive << ( out_id_V_1_ack_in );
    sensitive << ( out_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_data_V_0_ack_in);
    sensitive << ( in_data_V_0_state );

    SC_METHOD(thread_in_data_V_0_ack_out);
    sensitive << ( grp_mnist_lstm_fu_456_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_data_V_0_data_out);
    sensitive << ( in_data_V_0_payload_A );
    sensitive << ( in_data_V_0_payload_B );
    sensitive << ( in_data_V_0_sel );

    SC_METHOD(thread_in_data_V_0_load_A);
    sensitive << ( in_data_V_0_sel_wr );
    sensitive << ( in_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_V_0_load_B);
    sensitive << ( in_data_V_0_sel_wr );
    sensitive << ( in_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_V_0_sel);
    sensitive << ( in_data_V_0_sel_rd );

    SC_METHOD(thread_in_data_V_0_state_cmp_full);
    sensitive << ( in_data_V_0_state );

    SC_METHOD(thread_in_data_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_data_V_0_vld_out);
    sensitive << ( in_data_V_0_state );

    SC_METHOD(thread_in_dest_V_0_ack_in);
    sensitive << ( in_dest_V_0_state );

    SC_METHOD(thread_in_dest_V_0_ack_out);
    sensitive << ( grp_mnist_lstm_fu_456_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_dest_V_0_data_out);
    sensitive << ( in_dest_V_0_payload_A );
    sensitive << ( in_dest_V_0_payload_B );
    sensitive << ( in_dest_V_0_sel );

    SC_METHOD(thread_in_dest_V_0_load_A);
    sensitive << ( in_dest_V_0_sel_wr );
    sensitive << ( in_dest_V_0_state_cmp_full );

    SC_METHOD(thread_in_dest_V_0_load_B);
    sensitive << ( in_dest_V_0_sel_wr );
    sensitive << ( in_dest_V_0_state_cmp_full );

    SC_METHOD(thread_in_dest_V_0_sel);
    sensitive << ( in_dest_V_0_sel_rd );

    SC_METHOD(thread_in_dest_V_0_state_cmp_full);
    sensitive << ( in_dest_V_0_state );

    SC_METHOD(thread_in_dest_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_dest_V_0_vld_out);
    sensitive << ( in_dest_V_0_state );

    SC_METHOD(thread_in_id_V_0_ack_in);
    sensitive << ( in_id_V_0_state );

    SC_METHOD(thread_in_id_V_0_ack_out);
    sensitive << ( grp_mnist_lstm_fu_456_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_id_V_0_data_out);
    sensitive << ( in_id_V_0_payload_A );
    sensitive << ( in_id_V_0_payload_B );
    sensitive << ( in_id_V_0_sel );

    SC_METHOD(thread_in_id_V_0_load_A);
    sensitive << ( in_id_V_0_sel_wr );
    sensitive << ( in_id_V_0_state_cmp_full );

    SC_METHOD(thread_in_id_V_0_load_B);
    sensitive << ( in_id_V_0_sel_wr );
    sensitive << ( in_id_V_0_state_cmp_full );

    SC_METHOD(thread_in_id_V_0_sel);
    sensitive << ( in_id_V_0_sel_rd );

    SC_METHOD(thread_in_id_V_0_state_cmp_full);
    sensitive << ( in_id_V_0_state );

    SC_METHOD(thread_in_id_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_id_V_0_vld_out);
    sensitive << ( in_id_V_0_state );

    SC_METHOD(thread_in_keep_V_0_ack_in);
    sensitive << ( in_keep_V_0_state );

    SC_METHOD(thread_in_keep_V_0_ack_out);
    sensitive << ( grp_mnist_lstm_fu_456_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_keep_V_0_data_out);
    sensitive << ( in_keep_V_0_payload_A );
    sensitive << ( in_keep_V_0_payload_B );
    sensitive << ( in_keep_V_0_sel );

    SC_METHOD(thread_in_keep_V_0_load_A);
    sensitive << ( in_keep_V_0_sel_wr );
    sensitive << ( in_keep_V_0_state_cmp_full );

    SC_METHOD(thread_in_keep_V_0_load_B);
    sensitive << ( in_keep_V_0_sel_wr );
    sensitive << ( in_keep_V_0_state_cmp_full );

    SC_METHOD(thread_in_keep_V_0_sel);
    sensitive << ( in_keep_V_0_sel_rd );

    SC_METHOD(thread_in_keep_V_0_state_cmp_full);
    sensitive << ( in_keep_V_0_state );

    SC_METHOD(thread_in_keep_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_keep_V_0_vld_out);
    sensitive << ( in_keep_V_0_state );

    SC_METHOD(thread_in_last_V_0_ack_in);
    sensitive << ( in_last_V_0_state );

    SC_METHOD(thread_in_last_V_0_ack_out);
    sensitive << ( grp_mnist_lstm_fu_456_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_last_V_0_data_out);
    sensitive << ( in_last_V_0_payload_A );
    sensitive << ( in_last_V_0_payload_B );
    sensitive << ( in_last_V_0_sel );

    SC_METHOD(thread_in_last_V_0_load_A);
    sensitive << ( in_last_V_0_sel_wr );
    sensitive << ( in_last_V_0_state_cmp_full );

    SC_METHOD(thread_in_last_V_0_load_B);
    sensitive << ( in_last_V_0_sel_wr );
    sensitive << ( in_last_V_0_state_cmp_full );

    SC_METHOD(thread_in_last_V_0_sel);
    sensitive << ( in_last_V_0_sel_rd );

    SC_METHOD(thread_in_last_V_0_state_cmp_full);
    sensitive << ( in_last_V_0_state );

    SC_METHOD(thread_in_last_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_last_V_0_vld_out);
    sensitive << ( in_last_V_0_state );

    SC_METHOD(thread_in_r_TREADY);
    sensitive << ( in_dest_V_0_state );

    SC_METHOD(thread_in_strb_V_0_ack_in);
    sensitive << ( in_strb_V_0_state );

    SC_METHOD(thread_in_strb_V_0_ack_out);
    sensitive << ( grp_mnist_lstm_fu_456_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_strb_V_0_data_out);
    sensitive << ( in_strb_V_0_payload_A );
    sensitive << ( in_strb_V_0_payload_B );
    sensitive << ( in_strb_V_0_sel );

    SC_METHOD(thread_in_strb_V_0_load_A);
    sensitive << ( in_strb_V_0_sel_wr );
    sensitive << ( in_strb_V_0_state_cmp_full );

    SC_METHOD(thread_in_strb_V_0_load_B);
    sensitive << ( in_strb_V_0_sel_wr );
    sensitive << ( in_strb_V_0_state_cmp_full );

    SC_METHOD(thread_in_strb_V_0_sel);
    sensitive << ( in_strb_V_0_sel_rd );

    SC_METHOD(thread_in_strb_V_0_state_cmp_full);
    sensitive << ( in_strb_V_0_state );

    SC_METHOD(thread_in_strb_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_strb_V_0_vld_out);
    sensitive << ( in_strb_V_0_state );

    SC_METHOD(thread_in_user_V_0_ack_in);
    sensitive << ( in_user_V_0_state );

    SC_METHOD(thread_in_user_V_0_ack_out);
    sensitive << ( grp_mnist_lstm_fu_456_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_user_V_0_data_out);
    sensitive << ( in_user_V_0_payload_A );
    sensitive << ( in_user_V_0_payload_B );
    sensitive << ( in_user_V_0_sel );

    SC_METHOD(thread_in_user_V_0_load_A);
    sensitive << ( in_user_V_0_sel_wr );
    sensitive << ( in_user_V_0_state_cmp_full );

    SC_METHOD(thread_in_user_V_0_load_B);
    sensitive << ( in_user_V_0_sel_wr );
    sensitive << ( in_user_V_0_state_cmp_full );

    SC_METHOD(thread_in_user_V_0_sel);
    sensitive << ( in_user_V_0_sel_rd );

    SC_METHOD(thread_in_user_V_0_state_cmp_full);
    sensitive << ( in_user_V_0_state );

    SC_METHOD(thread_in_user_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_user_V_0_vld_out);
    sensitive << ( in_user_V_0_state );

    SC_METHOD(thread_out_data_V_1_ack_in);
    sensitive << ( out_data_V_1_state );

    SC_METHOD(thread_out_data_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_data_V_1_data_out);
    sensitive << ( out_data_V_1_payload_A );
    sensitive << ( out_data_V_1_payload_B );
    sensitive << ( out_data_V_1_sel );

    SC_METHOD(thread_out_data_V_1_load_A);
    sensitive << ( out_data_V_1_sel_wr );
    sensitive << ( out_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_V_1_load_B);
    sensitive << ( out_data_V_1_sel_wr );
    sensitive << ( out_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_V_1_sel);
    sensitive << ( out_data_V_1_sel_rd );

    SC_METHOD(thread_out_data_V_1_state_cmp_full);
    sensitive << ( out_data_V_1_state );

    SC_METHOD(thread_out_data_V_1_vld_in);
    sensitive << ( grp_mnist_lstm_fu_456_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_data_V_1_vld_out);
    sensitive << ( out_data_V_1_state );

    SC_METHOD(thread_out_dest_V_1_ack_in);
    sensitive << ( out_dest_V_1_state );

    SC_METHOD(thread_out_dest_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_dest_V_1_data_out);
    sensitive << ( out_dest_V_1_payload_A );
    sensitive << ( out_dest_V_1_payload_B );
    sensitive << ( out_dest_V_1_sel );

    SC_METHOD(thread_out_dest_V_1_load_A);
    sensitive << ( out_dest_V_1_sel_wr );
    sensitive << ( out_dest_V_1_state_cmp_full );

    SC_METHOD(thread_out_dest_V_1_load_B);
    sensitive << ( out_dest_V_1_sel_wr );
    sensitive << ( out_dest_V_1_state_cmp_full );

    SC_METHOD(thread_out_dest_V_1_sel);
    sensitive << ( out_dest_V_1_sel_rd );

    SC_METHOD(thread_out_dest_V_1_state_cmp_full);
    sensitive << ( out_dest_V_1_state );

    SC_METHOD(thread_out_dest_V_1_vld_in);
    sensitive << ( grp_mnist_lstm_fu_456_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_dest_V_1_vld_out);
    sensitive << ( out_dest_V_1_state );

    SC_METHOD(thread_out_id_V_1_ack_in);
    sensitive << ( out_id_V_1_state );

    SC_METHOD(thread_out_id_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_id_V_1_data_out);
    sensitive << ( out_id_V_1_payload_A );
    sensitive << ( out_id_V_1_payload_B );
    sensitive << ( out_id_V_1_sel );

    SC_METHOD(thread_out_id_V_1_load_A);
    sensitive << ( out_id_V_1_sel_wr );
    sensitive << ( out_id_V_1_state_cmp_full );

    SC_METHOD(thread_out_id_V_1_load_B);
    sensitive << ( out_id_V_1_sel_wr );
    sensitive << ( out_id_V_1_state_cmp_full );

    SC_METHOD(thread_out_id_V_1_sel);
    sensitive << ( out_id_V_1_sel_rd );

    SC_METHOD(thread_out_id_V_1_state_cmp_full);
    sensitive << ( out_id_V_1_state );

    SC_METHOD(thread_out_id_V_1_vld_in);
    sensitive << ( grp_mnist_lstm_fu_456_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_id_V_1_vld_out);
    sensitive << ( out_id_V_1_state );

    SC_METHOD(thread_out_keep_V_1_ack_in);
    sensitive << ( out_keep_V_1_state );

    SC_METHOD(thread_out_keep_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_keep_V_1_data_out);
    sensitive << ( out_keep_V_1_payload_A );
    sensitive << ( out_keep_V_1_payload_B );
    sensitive << ( out_keep_V_1_sel );

    SC_METHOD(thread_out_keep_V_1_load_A);
    sensitive << ( out_keep_V_1_sel_wr );
    sensitive << ( out_keep_V_1_state_cmp_full );

    SC_METHOD(thread_out_keep_V_1_load_B);
    sensitive << ( out_keep_V_1_sel_wr );
    sensitive << ( out_keep_V_1_state_cmp_full );

    SC_METHOD(thread_out_keep_V_1_sel);
    sensitive << ( out_keep_V_1_sel_rd );

    SC_METHOD(thread_out_keep_V_1_state_cmp_full);
    sensitive << ( out_keep_V_1_state );

    SC_METHOD(thread_out_keep_V_1_vld_in);
    sensitive << ( grp_mnist_lstm_fu_456_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_keep_V_1_vld_out);
    sensitive << ( out_keep_V_1_state );

    SC_METHOD(thread_out_last_V_1_ack_in);
    sensitive << ( out_last_V_1_state );

    SC_METHOD(thread_out_last_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_last_V_1_data_out);
    sensitive << ( out_last_V_1_payload_A );
    sensitive << ( out_last_V_1_payload_B );
    sensitive << ( out_last_V_1_sel );

    SC_METHOD(thread_out_last_V_1_load_A);
    sensitive << ( out_last_V_1_sel_wr );
    sensitive << ( out_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_last_V_1_load_B);
    sensitive << ( out_last_V_1_sel_wr );
    sensitive << ( out_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_last_V_1_sel);
    sensitive << ( out_last_V_1_sel_rd );

    SC_METHOD(thread_out_last_V_1_state_cmp_full);
    sensitive << ( out_last_V_1_state );

    SC_METHOD(thread_out_last_V_1_vld_in);
    sensitive << ( grp_mnist_lstm_fu_456_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_last_V_1_vld_out);
    sensitive << ( out_last_V_1_state );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( out_data_V_1_data_out );

    SC_METHOD(thread_out_r_TDEST);
    sensitive << ( out_dest_V_1_data_out );

    SC_METHOD(thread_out_r_TID);
    sensitive << ( out_id_V_1_data_out );

    SC_METHOD(thread_out_r_TKEEP);
    sensitive << ( out_keep_V_1_data_out );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( out_last_V_1_data_out );

    SC_METHOD(thread_out_r_TSTRB);
    sensitive << ( out_strb_V_1_data_out );

    SC_METHOD(thread_out_r_TUSER);
    sensitive << ( out_user_V_1_data_out );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( out_dest_V_1_state );

    SC_METHOD(thread_out_strb_V_1_ack_in);
    sensitive << ( out_strb_V_1_state );

    SC_METHOD(thread_out_strb_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_strb_V_1_data_out);
    sensitive << ( out_strb_V_1_payload_A );
    sensitive << ( out_strb_V_1_payload_B );
    sensitive << ( out_strb_V_1_sel );

    SC_METHOD(thread_out_strb_V_1_load_A);
    sensitive << ( out_strb_V_1_sel_wr );
    sensitive << ( out_strb_V_1_state_cmp_full );

    SC_METHOD(thread_out_strb_V_1_load_B);
    sensitive << ( out_strb_V_1_sel_wr );
    sensitive << ( out_strb_V_1_state_cmp_full );

    SC_METHOD(thread_out_strb_V_1_sel);
    sensitive << ( out_strb_V_1_sel_rd );

    SC_METHOD(thread_out_strb_V_1_state_cmp_full);
    sensitive << ( out_strb_V_1_state );

    SC_METHOD(thread_out_strb_V_1_vld_in);
    sensitive << ( grp_mnist_lstm_fu_456_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_strb_V_1_vld_out);
    sensitive << ( out_strb_V_1_state );

    SC_METHOD(thread_out_user_V_1_ack_in);
    sensitive << ( out_user_V_1_state );

    SC_METHOD(thread_out_user_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_user_V_1_data_out);
    sensitive << ( out_user_V_1_payload_A );
    sensitive << ( out_user_V_1_payload_B );
    sensitive << ( out_user_V_1_sel );

    SC_METHOD(thread_out_user_V_1_load_A);
    sensitive << ( out_user_V_1_sel_wr );
    sensitive << ( out_user_V_1_state_cmp_full );

    SC_METHOD(thread_out_user_V_1_load_B);
    sensitive << ( out_user_V_1_sel_wr );
    sensitive << ( out_user_V_1_state_cmp_full );

    SC_METHOD(thread_out_user_V_1_sel);
    sensitive << ( out_user_V_1_sel_rd );

    SC_METHOD(thread_out_user_V_1_state_cmp_full);
    sensitive << ( out_user_V_1_state );

    SC_METHOD(thread_out_user_V_1_vld_in);
    sensitive << ( grp_mnist_lstm_fu_456_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_user_V_1_vld_out);
    sensitive << ( out_user_V_1_state );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( out_data_V_1_ack_in );
    sensitive << ( out_data_V_1_state );
    sensitive << ( out_keep_V_1_ack_in );
    sensitive << ( out_keep_V_1_state );
    sensitive << ( out_strb_V_1_ack_in );
    sensitive << ( out_strb_V_1_state );
    sensitive << ( out_user_V_1_ack_in );
    sensitive << ( out_user_V_1_state );
    sensitive << ( out_last_V_1_ack_in );
    sensitive << ( out_last_V_1_state );
    sensitive << ( out_id_V_1_ack_in );
    sensitive << ( out_id_V_1_state );
    sensitive << ( out_dest_V_1_ack_in );
    sensitive << ( out_dest_V_1_state );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_on_subcall_done );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    in_data_V_0_sel_rd = SC_LOGIC_0;
    in_data_V_0_sel_wr = SC_LOGIC_0;
    in_data_V_0_state = "00";
    in_keep_V_0_sel_rd = SC_LOGIC_0;
    in_keep_V_0_sel_wr = SC_LOGIC_0;
    in_keep_V_0_state = "00";
    in_strb_V_0_sel_rd = SC_LOGIC_0;
    in_strb_V_0_sel_wr = SC_LOGIC_0;
    in_strb_V_0_state = "00";
    in_user_V_0_sel_rd = SC_LOGIC_0;
    in_user_V_0_sel_wr = SC_LOGIC_0;
    in_user_V_0_state = "00";
    in_last_V_0_sel_rd = SC_LOGIC_0;
    in_last_V_0_sel_wr = SC_LOGIC_0;
    in_last_V_0_state = "00";
    in_id_V_0_sel_rd = SC_LOGIC_0;
    in_id_V_0_sel_wr = SC_LOGIC_0;
    in_id_V_0_state = "00";
    in_dest_V_0_sel_rd = SC_LOGIC_0;
    in_dest_V_0_sel_wr = SC_LOGIC_0;
    in_dest_V_0_state = "00";
    out_data_V_1_sel_rd = SC_LOGIC_0;
    out_data_V_1_sel_wr = SC_LOGIC_0;
    out_data_V_1_state = "00";
    out_keep_V_1_sel_rd = SC_LOGIC_0;
    out_keep_V_1_sel_wr = SC_LOGIC_0;
    out_keep_V_1_state = "00";
    out_strb_V_1_sel_rd = SC_LOGIC_0;
    out_strb_V_1_sel_wr = SC_LOGIC_0;
    out_strb_V_1_state = "00";
    out_user_V_1_sel_rd = SC_LOGIC_0;
    out_user_V_1_sel_wr = SC_LOGIC_0;
    out_user_V_1_state = "00";
    out_last_V_1_sel_rd = SC_LOGIC_0;
    out_last_V_1_sel_wr = SC_LOGIC_0;
    out_last_V_1_state = "00";
    out_id_V_1_sel_rd = SC_LOGIC_0;
    out_id_V_1_sel_wr = SC_LOGIC_0;
    out_id_V_1_state = "00";
    out_dest_V_1_sel_rd = SC_LOGIC_0;
    out_dest_V_1_sel_wr = SC_LOGIC_0;
    out_dest_V_1_state = "00";
    grp_mnist_lstm_fu_456_ap_start_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready = SC_LOGIC_0;
    ap_sync_reg_grp_mnist_lstm_fu_456_ap_done = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "LSTM_Top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_r_TDATA, "(port)in_r_TDATA");
    sc_trace(mVcdFile, in_r_TVALID, "(port)in_r_TVALID");
    sc_trace(mVcdFile, in_r_TREADY, "(port)in_r_TREADY");
    sc_trace(mVcdFile, in_r_TKEEP, "(port)in_r_TKEEP");
    sc_trace(mVcdFile, in_r_TSTRB, "(port)in_r_TSTRB");
    sc_trace(mVcdFile, in_r_TUSER, "(port)in_r_TUSER");
    sc_trace(mVcdFile, in_r_TLAST, "(port)in_r_TLAST");
    sc_trace(mVcdFile, in_r_TID, "(port)in_r_TID");
    sc_trace(mVcdFile, in_r_TDEST, "(port)in_r_TDEST");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
    sc_trace(mVcdFile, out_r_TKEEP, "(port)out_r_TKEEP");
    sc_trace(mVcdFile, out_r_TSTRB, "(port)out_r_TSTRB");
    sc_trace(mVcdFile, out_r_TUSER, "(port)out_r_TUSER");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
    sc_trace(mVcdFile, out_r_TID, "(port)out_r_TID");
    sc_trace(mVcdFile, out_r_TDEST, "(port)out_r_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, in_data_V_0_data_out, "in_data_V_0_data_out");
    sc_trace(mVcdFile, in_data_V_0_vld_in, "in_data_V_0_vld_in");
    sc_trace(mVcdFile, in_data_V_0_vld_out, "in_data_V_0_vld_out");
    sc_trace(mVcdFile, in_data_V_0_ack_in, "in_data_V_0_ack_in");
    sc_trace(mVcdFile, in_data_V_0_ack_out, "in_data_V_0_ack_out");
    sc_trace(mVcdFile, in_data_V_0_payload_A, "in_data_V_0_payload_A");
    sc_trace(mVcdFile, in_data_V_0_payload_B, "in_data_V_0_payload_B");
    sc_trace(mVcdFile, in_data_V_0_sel_rd, "in_data_V_0_sel_rd");
    sc_trace(mVcdFile, in_data_V_0_sel_wr, "in_data_V_0_sel_wr");
    sc_trace(mVcdFile, in_data_V_0_sel, "in_data_V_0_sel");
    sc_trace(mVcdFile, in_data_V_0_load_A, "in_data_V_0_load_A");
    sc_trace(mVcdFile, in_data_V_0_load_B, "in_data_V_0_load_B");
    sc_trace(mVcdFile, in_data_V_0_state, "in_data_V_0_state");
    sc_trace(mVcdFile, in_data_V_0_state_cmp_full, "in_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_keep_V_0_data_out, "in_keep_V_0_data_out");
    sc_trace(mVcdFile, in_keep_V_0_vld_in, "in_keep_V_0_vld_in");
    sc_trace(mVcdFile, in_keep_V_0_vld_out, "in_keep_V_0_vld_out");
    sc_trace(mVcdFile, in_keep_V_0_ack_in, "in_keep_V_0_ack_in");
    sc_trace(mVcdFile, in_keep_V_0_ack_out, "in_keep_V_0_ack_out");
    sc_trace(mVcdFile, in_keep_V_0_payload_A, "in_keep_V_0_payload_A");
    sc_trace(mVcdFile, in_keep_V_0_payload_B, "in_keep_V_0_payload_B");
    sc_trace(mVcdFile, in_keep_V_0_sel_rd, "in_keep_V_0_sel_rd");
    sc_trace(mVcdFile, in_keep_V_0_sel_wr, "in_keep_V_0_sel_wr");
    sc_trace(mVcdFile, in_keep_V_0_sel, "in_keep_V_0_sel");
    sc_trace(mVcdFile, in_keep_V_0_load_A, "in_keep_V_0_load_A");
    sc_trace(mVcdFile, in_keep_V_0_load_B, "in_keep_V_0_load_B");
    sc_trace(mVcdFile, in_keep_V_0_state, "in_keep_V_0_state");
    sc_trace(mVcdFile, in_keep_V_0_state_cmp_full, "in_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_strb_V_0_data_out, "in_strb_V_0_data_out");
    sc_trace(mVcdFile, in_strb_V_0_vld_in, "in_strb_V_0_vld_in");
    sc_trace(mVcdFile, in_strb_V_0_vld_out, "in_strb_V_0_vld_out");
    sc_trace(mVcdFile, in_strb_V_0_ack_in, "in_strb_V_0_ack_in");
    sc_trace(mVcdFile, in_strb_V_0_ack_out, "in_strb_V_0_ack_out");
    sc_trace(mVcdFile, in_strb_V_0_payload_A, "in_strb_V_0_payload_A");
    sc_trace(mVcdFile, in_strb_V_0_payload_B, "in_strb_V_0_payload_B");
    sc_trace(mVcdFile, in_strb_V_0_sel_rd, "in_strb_V_0_sel_rd");
    sc_trace(mVcdFile, in_strb_V_0_sel_wr, "in_strb_V_0_sel_wr");
    sc_trace(mVcdFile, in_strb_V_0_sel, "in_strb_V_0_sel");
    sc_trace(mVcdFile, in_strb_V_0_load_A, "in_strb_V_0_load_A");
    sc_trace(mVcdFile, in_strb_V_0_load_B, "in_strb_V_0_load_B");
    sc_trace(mVcdFile, in_strb_V_0_state, "in_strb_V_0_state");
    sc_trace(mVcdFile, in_strb_V_0_state_cmp_full, "in_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_user_V_0_data_out, "in_user_V_0_data_out");
    sc_trace(mVcdFile, in_user_V_0_vld_in, "in_user_V_0_vld_in");
    sc_trace(mVcdFile, in_user_V_0_vld_out, "in_user_V_0_vld_out");
    sc_trace(mVcdFile, in_user_V_0_ack_in, "in_user_V_0_ack_in");
    sc_trace(mVcdFile, in_user_V_0_ack_out, "in_user_V_0_ack_out");
    sc_trace(mVcdFile, in_user_V_0_payload_A, "in_user_V_0_payload_A");
    sc_trace(mVcdFile, in_user_V_0_payload_B, "in_user_V_0_payload_B");
    sc_trace(mVcdFile, in_user_V_0_sel_rd, "in_user_V_0_sel_rd");
    sc_trace(mVcdFile, in_user_V_0_sel_wr, "in_user_V_0_sel_wr");
    sc_trace(mVcdFile, in_user_V_0_sel, "in_user_V_0_sel");
    sc_trace(mVcdFile, in_user_V_0_load_A, "in_user_V_0_load_A");
    sc_trace(mVcdFile, in_user_V_0_load_B, "in_user_V_0_load_B");
    sc_trace(mVcdFile, in_user_V_0_state, "in_user_V_0_state");
    sc_trace(mVcdFile, in_user_V_0_state_cmp_full, "in_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_last_V_0_data_out, "in_last_V_0_data_out");
    sc_trace(mVcdFile, in_last_V_0_vld_in, "in_last_V_0_vld_in");
    sc_trace(mVcdFile, in_last_V_0_vld_out, "in_last_V_0_vld_out");
    sc_trace(mVcdFile, in_last_V_0_ack_in, "in_last_V_0_ack_in");
    sc_trace(mVcdFile, in_last_V_0_ack_out, "in_last_V_0_ack_out");
    sc_trace(mVcdFile, in_last_V_0_payload_A, "in_last_V_0_payload_A");
    sc_trace(mVcdFile, in_last_V_0_payload_B, "in_last_V_0_payload_B");
    sc_trace(mVcdFile, in_last_V_0_sel_rd, "in_last_V_0_sel_rd");
    sc_trace(mVcdFile, in_last_V_0_sel_wr, "in_last_V_0_sel_wr");
    sc_trace(mVcdFile, in_last_V_0_sel, "in_last_V_0_sel");
    sc_trace(mVcdFile, in_last_V_0_load_A, "in_last_V_0_load_A");
    sc_trace(mVcdFile, in_last_V_0_load_B, "in_last_V_0_load_B");
    sc_trace(mVcdFile, in_last_V_0_state, "in_last_V_0_state");
    sc_trace(mVcdFile, in_last_V_0_state_cmp_full, "in_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_id_V_0_data_out, "in_id_V_0_data_out");
    sc_trace(mVcdFile, in_id_V_0_vld_in, "in_id_V_0_vld_in");
    sc_trace(mVcdFile, in_id_V_0_vld_out, "in_id_V_0_vld_out");
    sc_trace(mVcdFile, in_id_V_0_ack_in, "in_id_V_0_ack_in");
    sc_trace(mVcdFile, in_id_V_0_ack_out, "in_id_V_0_ack_out");
    sc_trace(mVcdFile, in_id_V_0_payload_A, "in_id_V_0_payload_A");
    sc_trace(mVcdFile, in_id_V_0_payload_B, "in_id_V_0_payload_B");
    sc_trace(mVcdFile, in_id_V_0_sel_rd, "in_id_V_0_sel_rd");
    sc_trace(mVcdFile, in_id_V_0_sel_wr, "in_id_V_0_sel_wr");
    sc_trace(mVcdFile, in_id_V_0_sel, "in_id_V_0_sel");
    sc_trace(mVcdFile, in_id_V_0_load_A, "in_id_V_0_load_A");
    sc_trace(mVcdFile, in_id_V_0_load_B, "in_id_V_0_load_B");
    sc_trace(mVcdFile, in_id_V_0_state, "in_id_V_0_state");
    sc_trace(mVcdFile, in_id_V_0_state_cmp_full, "in_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_dest_V_0_data_out, "in_dest_V_0_data_out");
    sc_trace(mVcdFile, in_dest_V_0_vld_in, "in_dest_V_0_vld_in");
    sc_trace(mVcdFile, in_dest_V_0_vld_out, "in_dest_V_0_vld_out");
    sc_trace(mVcdFile, in_dest_V_0_ack_in, "in_dest_V_0_ack_in");
    sc_trace(mVcdFile, in_dest_V_0_ack_out, "in_dest_V_0_ack_out");
    sc_trace(mVcdFile, in_dest_V_0_payload_A, "in_dest_V_0_payload_A");
    sc_trace(mVcdFile, in_dest_V_0_payload_B, "in_dest_V_0_payload_B");
    sc_trace(mVcdFile, in_dest_V_0_sel_rd, "in_dest_V_0_sel_rd");
    sc_trace(mVcdFile, in_dest_V_0_sel_wr, "in_dest_V_0_sel_wr");
    sc_trace(mVcdFile, in_dest_V_0_sel, "in_dest_V_0_sel");
    sc_trace(mVcdFile, in_dest_V_0_load_A, "in_dest_V_0_load_A");
    sc_trace(mVcdFile, in_dest_V_0_load_B, "in_dest_V_0_load_B");
    sc_trace(mVcdFile, in_dest_V_0_state, "in_dest_V_0_state");
    sc_trace(mVcdFile, in_dest_V_0_state_cmp_full, "in_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, out_data_V_1_data_out, "out_data_V_1_data_out");
    sc_trace(mVcdFile, out_data_V_1_vld_in, "out_data_V_1_vld_in");
    sc_trace(mVcdFile, out_data_V_1_vld_out, "out_data_V_1_vld_out");
    sc_trace(mVcdFile, out_data_V_1_ack_in, "out_data_V_1_ack_in");
    sc_trace(mVcdFile, out_data_V_1_ack_out, "out_data_V_1_ack_out");
    sc_trace(mVcdFile, out_data_V_1_payload_A, "out_data_V_1_payload_A");
    sc_trace(mVcdFile, out_data_V_1_payload_B, "out_data_V_1_payload_B");
    sc_trace(mVcdFile, out_data_V_1_sel_rd, "out_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_data_V_1_sel_wr, "out_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_data_V_1_sel, "out_data_V_1_sel");
    sc_trace(mVcdFile, out_data_V_1_load_A, "out_data_V_1_load_A");
    sc_trace(mVcdFile, out_data_V_1_load_B, "out_data_V_1_load_B");
    sc_trace(mVcdFile, out_data_V_1_state, "out_data_V_1_state");
    sc_trace(mVcdFile, out_data_V_1_state_cmp_full, "out_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_keep_V_1_data_out, "out_keep_V_1_data_out");
    sc_trace(mVcdFile, out_keep_V_1_vld_in, "out_keep_V_1_vld_in");
    sc_trace(mVcdFile, out_keep_V_1_vld_out, "out_keep_V_1_vld_out");
    sc_trace(mVcdFile, out_keep_V_1_ack_in, "out_keep_V_1_ack_in");
    sc_trace(mVcdFile, out_keep_V_1_ack_out, "out_keep_V_1_ack_out");
    sc_trace(mVcdFile, out_keep_V_1_payload_A, "out_keep_V_1_payload_A");
    sc_trace(mVcdFile, out_keep_V_1_payload_B, "out_keep_V_1_payload_B");
    sc_trace(mVcdFile, out_keep_V_1_sel_rd, "out_keep_V_1_sel_rd");
    sc_trace(mVcdFile, out_keep_V_1_sel_wr, "out_keep_V_1_sel_wr");
    sc_trace(mVcdFile, out_keep_V_1_sel, "out_keep_V_1_sel");
    sc_trace(mVcdFile, out_keep_V_1_load_A, "out_keep_V_1_load_A");
    sc_trace(mVcdFile, out_keep_V_1_load_B, "out_keep_V_1_load_B");
    sc_trace(mVcdFile, out_keep_V_1_state, "out_keep_V_1_state");
    sc_trace(mVcdFile, out_keep_V_1_state_cmp_full, "out_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_strb_V_1_data_out, "out_strb_V_1_data_out");
    sc_trace(mVcdFile, out_strb_V_1_vld_in, "out_strb_V_1_vld_in");
    sc_trace(mVcdFile, out_strb_V_1_vld_out, "out_strb_V_1_vld_out");
    sc_trace(mVcdFile, out_strb_V_1_ack_in, "out_strb_V_1_ack_in");
    sc_trace(mVcdFile, out_strb_V_1_ack_out, "out_strb_V_1_ack_out");
    sc_trace(mVcdFile, out_strb_V_1_payload_A, "out_strb_V_1_payload_A");
    sc_trace(mVcdFile, out_strb_V_1_payload_B, "out_strb_V_1_payload_B");
    sc_trace(mVcdFile, out_strb_V_1_sel_rd, "out_strb_V_1_sel_rd");
    sc_trace(mVcdFile, out_strb_V_1_sel_wr, "out_strb_V_1_sel_wr");
    sc_trace(mVcdFile, out_strb_V_1_sel, "out_strb_V_1_sel");
    sc_trace(mVcdFile, out_strb_V_1_load_A, "out_strb_V_1_load_A");
    sc_trace(mVcdFile, out_strb_V_1_load_B, "out_strb_V_1_load_B");
    sc_trace(mVcdFile, out_strb_V_1_state, "out_strb_V_1_state");
    sc_trace(mVcdFile, out_strb_V_1_state_cmp_full, "out_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_user_V_1_data_out, "out_user_V_1_data_out");
    sc_trace(mVcdFile, out_user_V_1_vld_in, "out_user_V_1_vld_in");
    sc_trace(mVcdFile, out_user_V_1_vld_out, "out_user_V_1_vld_out");
    sc_trace(mVcdFile, out_user_V_1_ack_in, "out_user_V_1_ack_in");
    sc_trace(mVcdFile, out_user_V_1_ack_out, "out_user_V_1_ack_out");
    sc_trace(mVcdFile, out_user_V_1_payload_A, "out_user_V_1_payload_A");
    sc_trace(mVcdFile, out_user_V_1_payload_B, "out_user_V_1_payload_B");
    sc_trace(mVcdFile, out_user_V_1_sel_rd, "out_user_V_1_sel_rd");
    sc_trace(mVcdFile, out_user_V_1_sel_wr, "out_user_V_1_sel_wr");
    sc_trace(mVcdFile, out_user_V_1_sel, "out_user_V_1_sel");
    sc_trace(mVcdFile, out_user_V_1_load_A, "out_user_V_1_load_A");
    sc_trace(mVcdFile, out_user_V_1_load_B, "out_user_V_1_load_B");
    sc_trace(mVcdFile, out_user_V_1_state, "out_user_V_1_state");
    sc_trace(mVcdFile, out_user_V_1_state_cmp_full, "out_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_last_V_1_data_out, "out_last_V_1_data_out");
    sc_trace(mVcdFile, out_last_V_1_vld_in, "out_last_V_1_vld_in");
    sc_trace(mVcdFile, out_last_V_1_vld_out, "out_last_V_1_vld_out");
    sc_trace(mVcdFile, out_last_V_1_ack_in, "out_last_V_1_ack_in");
    sc_trace(mVcdFile, out_last_V_1_ack_out, "out_last_V_1_ack_out");
    sc_trace(mVcdFile, out_last_V_1_payload_A, "out_last_V_1_payload_A");
    sc_trace(mVcdFile, out_last_V_1_payload_B, "out_last_V_1_payload_B");
    sc_trace(mVcdFile, out_last_V_1_sel_rd, "out_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_last_V_1_sel_wr, "out_last_V_1_sel_wr");
    sc_trace(mVcdFile, out_last_V_1_sel, "out_last_V_1_sel");
    sc_trace(mVcdFile, out_last_V_1_load_A, "out_last_V_1_load_A");
    sc_trace(mVcdFile, out_last_V_1_load_B, "out_last_V_1_load_B");
    sc_trace(mVcdFile, out_last_V_1_state, "out_last_V_1_state");
    sc_trace(mVcdFile, out_last_V_1_state_cmp_full, "out_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_id_V_1_data_out, "out_id_V_1_data_out");
    sc_trace(mVcdFile, out_id_V_1_vld_in, "out_id_V_1_vld_in");
    sc_trace(mVcdFile, out_id_V_1_vld_out, "out_id_V_1_vld_out");
    sc_trace(mVcdFile, out_id_V_1_ack_in, "out_id_V_1_ack_in");
    sc_trace(mVcdFile, out_id_V_1_ack_out, "out_id_V_1_ack_out");
    sc_trace(mVcdFile, out_id_V_1_payload_A, "out_id_V_1_payload_A");
    sc_trace(mVcdFile, out_id_V_1_payload_B, "out_id_V_1_payload_B");
    sc_trace(mVcdFile, out_id_V_1_sel_rd, "out_id_V_1_sel_rd");
    sc_trace(mVcdFile, out_id_V_1_sel_wr, "out_id_V_1_sel_wr");
    sc_trace(mVcdFile, out_id_V_1_sel, "out_id_V_1_sel");
    sc_trace(mVcdFile, out_id_V_1_load_A, "out_id_V_1_load_A");
    sc_trace(mVcdFile, out_id_V_1_load_B, "out_id_V_1_load_B");
    sc_trace(mVcdFile, out_id_V_1_state, "out_id_V_1_state");
    sc_trace(mVcdFile, out_id_V_1_state_cmp_full, "out_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_dest_V_1_data_out, "out_dest_V_1_data_out");
    sc_trace(mVcdFile, out_dest_V_1_vld_in, "out_dest_V_1_vld_in");
    sc_trace(mVcdFile, out_dest_V_1_vld_out, "out_dest_V_1_vld_out");
    sc_trace(mVcdFile, out_dest_V_1_ack_in, "out_dest_V_1_ack_in");
    sc_trace(mVcdFile, out_dest_V_1_ack_out, "out_dest_V_1_ack_out");
    sc_trace(mVcdFile, out_dest_V_1_payload_A, "out_dest_V_1_payload_A");
    sc_trace(mVcdFile, out_dest_V_1_payload_B, "out_dest_V_1_payload_B");
    sc_trace(mVcdFile, out_dest_V_1_sel_rd, "out_dest_V_1_sel_rd");
    sc_trace(mVcdFile, out_dest_V_1_sel_wr, "out_dest_V_1_sel_wr");
    sc_trace(mVcdFile, out_dest_V_1_sel, "out_dest_V_1_sel");
    sc_trace(mVcdFile, out_dest_V_1_load_A, "out_dest_V_1_load_A");
    sc_trace(mVcdFile, out_dest_V_1_load_B, "out_dest_V_1_load_B");
    sc_trace(mVcdFile, out_dest_V_1_state, "out_dest_V_1_state");
    sc_trace(mVcdFile, out_dest_V_1_state_cmp_full, "out_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_out_r_TDATA, "grp_mnist_lstm_fu_456_out_r_TDATA");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_out_r_TKEEP, "grp_mnist_lstm_fu_456_out_r_TKEEP");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_out_r_TSTRB, "grp_mnist_lstm_fu_456_out_r_TSTRB");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_out_r_TUSER, "grp_mnist_lstm_fu_456_out_r_TUSER");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_out_r_TLAST, "grp_mnist_lstm_fu_456_out_r_TLAST");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_out_r_TID, "grp_mnist_lstm_fu_456_out_r_TID");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_out_r_TDEST, "grp_mnist_lstm_fu_456_out_r_TDEST");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_in_r_TVALID, "grp_mnist_lstm_fu_456_in_r_TVALID");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_in_r_TREADY, "grp_mnist_lstm_fu_456_in_r_TREADY");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_ap_start, "grp_mnist_lstm_fu_456_ap_start");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_out_r_TVALID, "grp_mnist_lstm_fu_456_out_r_TVALID");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_out_r_TREADY, "grp_mnist_lstm_fu_456_out_r_TREADY");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_ap_done, "grp_mnist_lstm_fu_456_ap_done");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_ap_ready, "grp_mnist_lstm_fu_456_ap_ready");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_ap_idle, "grp_mnist_lstm_fu_456_ap_idle");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_ap_continue, "grp_mnist_lstm_fu_456_ap_continue");
    sc_trace(mVcdFile, grp_mnist_lstm_fu_456_ap_start_reg, "grp_mnist_lstm_fu_456_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_sync_grp_mnist_lstm_fu_456_ap_ready, "ap_sync_grp_mnist_lstm_fu_456_ap_ready");
    sc_trace(mVcdFile, ap_sync_grp_mnist_lstm_fu_456_ap_done, "ap_sync_grp_mnist_lstm_fu_456_ap_done");
    sc_trace(mVcdFile, ap_block_state3_on_subcall_done, "ap_block_state3_on_subcall_done");
    sc_trace(mVcdFile, ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready, "ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready");
    sc_trace(mVcdFile, ap_sync_reg_grp_mnist_lstm_fu_456_ap_done, "ap_sync_reg_grp_mnist_lstm_fu_456_ap_done");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
#endif

    }
    mHdltvinHandle.open("LSTM_Top.hdltvin.dat");
    mHdltvoutHandle.open("LSTM_Top.hdltvout.dat");
}

LSTM_Top::~LSTM_Top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_mnist_lstm_fu_456;
}

void LSTM_Top::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_mnist_lstm_fu_456_ap_done = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_mnist_lstm_fu_456_ap_done = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_mnist_lstm_fu_456_ap_done.read())) {
            ap_sync_reg_grp_mnist_lstm_fu_456_ap_done = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_mnist_lstm_fu_456_ap_ready.read())) {
            ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_mnist_lstm_fu_456_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_grp_mnist_lstm_fu_456_ap_ready.read())))) {
            grp_mnist_lstm_fu_456_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_mnist_lstm_fu_456_ap_ready.read())) {
            grp_mnist_lstm_fu_456_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_vld_out.read()))) {
            in_data_V_0_sel_rd =  (sc_logic) (~in_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_ack_in.read()))) {
            in_data_V_0_sel_wr =  (sc_logic) (~in_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_2)))) {
            in_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_1)))) {
            in_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_ack_out.read()))))) {
            in_data_V_0_state = ap_const_lv2_3;
        } else {
            in_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_vld_out.read()))) {
            in_dest_V_0_sel_rd =  (sc_logic) (~in_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_ack_in.read()))) {
            in_dest_V_0_sel_wr =  (sc_logic) (~in_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_dest_V_0_state.read())))) {
            in_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_dest_V_0_state.read())))) {
            in_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_ack_out.read()))))) {
            in_dest_V_0_state = ap_const_lv2_3;
        } else {
            in_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_vld_out.read()))) {
            in_id_V_0_sel_rd =  (sc_logic) (~in_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_ack_in.read()))) {
            in_id_V_0_sel_wr =  (sc_logic) (~in_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_id_V_0_state.read())))) {
            in_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_id_V_0_state.read())))) {
            in_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_ack_out.read()))))) {
            in_id_V_0_state = ap_const_lv2_3;
        } else {
            in_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_vld_out.read()))) {
            in_keep_V_0_sel_rd =  (sc_logic) (~in_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_ack_in.read()))) {
            in_keep_V_0_sel_wr =  (sc_logic) (~in_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_keep_V_0_state.read())))) {
            in_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_keep_V_0_state.read())))) {
            in_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_ack_out.read()))))) {
            in_keep_V_0_state = ap_const_lv2_3;
        } else {
            in_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_vld_out.read()))) {
            in_last_V_0_sel_rd =  (sc_logic) (~in_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_ack_in.read()))) {
            in_last_V_0_sel_wr =  (sc_logic) (~in_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_last_V_0_state.read())))) {
            in_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_last_V_0_state.read())))) {
            in_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_ack_out.read()))))) {
            in_last_V_0_state = ap_const_lv2_3;
        } else {
            in_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_vld_out.read()))) {
            in_strb_V_0_sel_rd =  (sc_logic) (~in_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_ack_in.read()))) {
            in_strb_V_0_sel_wr =  (sc_logic) (~in_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_strb_V_0_state.read())))) {
            in_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_strb_V_0_state.read())))) {
            in_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_ack_out.read()))))) {
            in_strb_V_0_state = ap_const_lv2_3;
        } else {
            in_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_vld_out.read()))) {
            in_user_V_0_sel_rd =  (sc_logic) (~in_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_ack_in.read()))) {
            in_user_V_0_sel_wr =  (sc_logic) (~in_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_user_V_0_state.read())))) {
            in_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_user_V_0_state.read())))) {
            in_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_ack_out.read()))))) {
            in_user_V_0_state = ap_const_lv2_3;
        } else {
            in_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_vld_out.read()))) {
            out_data_V_1_sel_rd =  (sc_logic) (~out_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_ack_in.read()))) {
            out_data_V_1_sel_wr =  (sc_logic) (~out_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_data_V_1_state.read())))) {
            out_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_V_1_state.read())))) {
            out_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_ack_out.read()))))) {
            out_data_V_1_state = ap_const_lv2_3;
        } else {
            out_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_vld_out.read()))) {
            out_dest_V_1_sel_rd =  (sc_logic) (~out_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_ack_in.read()))) {
            out_dest_V_1_sel_wr =  (sc_logic) (~out_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_dest_V_1_state.read())))) {
            out_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_dest_V_1_state.read())))) {
            out_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_ack_out.read()))))) {
            out_dest_V_1_state = ap_const_lv2_3;
        } else {
            out_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_vld_out.read()))) {
            out_id_V_1_sel_rd =  (sc_logic) (~out_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_ack_in.read()))) {
            out_id_V_1_sel_wr =  (sc_logic) (~out_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_id_V_1_state.read())))) {
            out_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_id_V_1_state.read())))) {
            out_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_ack_out.read()))))) {
            out_id_V_1_state = ap_const_lv2_3;
        } else {
            out_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_vld_out.read()))) {
            out_keep_V_1_sel_rd =  (sc_logic) (~out_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_ack_in.read()))) {
            out_keep_V_1_sel_wr =  (sc_logic) (~out_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_keep_V_1_state.read())))) {
            out_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_keep_V_1_state.read())))) {
            out_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_ack_out.read()))))) {
            out_keep_V_1_state = ap_const_lv2_3;
        } else {
            out_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_out.read()))) {
            out_last_V_1_sel_rd =  (sc_logic) (~out_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_in.read()))) {
            out_last_V_1_sel_wr =  (sc_logic) (~out_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_last_V_1_state.read())))) {
            out_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_last_V_1_state.read())))) {
            out_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_out.read()))))) {
            out_last_V_1_state = ap_const_lv2_3;
        } else {
            out_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_vld_out.read()))) {
            out_strb_V_1_sel_rd =  (sc_logic) (~out_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_ack_in.read()))) {
            out_strb_V_1_sel_wr =  (sc_logic) (~out_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_strb_V_1_state.read())))) {
            out_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_strb_V_1_state.read())))) {
            out_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_ack_out.read()))))) {
            out_strb_V_1_state = ap_const_lv2_3;
        } else {
            out_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_vld_out.read()))) {
            out_user_V_1_sel_rd =  (sc_logic) (~out_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_ack_in.read()))) {
            out_user_V_1_sel_wr =  (sc_logic) (~out_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_user_V_1_state.read())))) {
            out_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_user_V_1_state.read())))) {
            out_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_ack_out.read()))))) {
            out_user_V_1_state = ap_const_lv2_3;
        } else {
            out_user_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_load_A.read())) {
        in_data_V_0_payload_A = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_load_B.read())) {
        in_data_V_0_payload_B = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_load_A.read())) {
        in_dest_V_0_payload_A = in_r_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_load_B.read())) {
        in_dest_V_0_payload_B = in_r_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_load_A.read())) {
        in_id_V_0_payload_A = in_r_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_load_B.read())) {
        in_id_V_0_payload_B = in_r_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_load_A.read())) {
        in_keep_V_0_payload_A = in_r_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_load_B.read())) {
        in_keep_V_0_payload_B = in_r_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_load_A.read())) {
        in_last_V_0_payload_A = in_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_load_B.read())) {
        in_last_V_0_payload_B = in_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_load_A.read())) {
        in_strb_V_0_payload_A = in_r_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_load_B.read())) {
        in_strb_V_0_payload_B = in_r_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_load_A.read())) {
        in_user_V_0_payload_A = in_r_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_load_B.read())) {
        in_user_V_0_payload_B = in_r_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_load_A.read())) {
        out_data_V_1_payload_A = grp_mnist_lstm_fu_456_out_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_load_B.read())) {
        out_data_V_1_payload_B = grp_mnist_lstm_fu_456_out_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_load_A.read())) {
        out_dest_V_1_payload_A = grp_mnist_lstm_fu_456_out_r_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_load_B.read())) {
        out_dest_V_1_payload_B = grp_mnist_lstm_fu_456_out_r_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_load_A.read())) {
        out_id_V_1_payload_A = grp_mnist_lstm_fu_456_out_r_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_load_B.read())) {
        out_id_V_1_payload_B = grp_mnist_lstm_fu_456_out_r_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_load_A.read())) {
        out_keep_V_1_payload_A = grp_mnist_lstm_fu_456_out_r_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_load_B.read())) {
        out_keep_V_1_payload_B = grp_mnist_lstm_fu_456_out_r_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_load_A.read())) {
        out_last_V_1_payload_A = grp_mnist_lstm_fu_456_out_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_load_B.read())) {
        out_last_V_1_payload_B = grp_mnist_lstm_fu_456_out_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_load_A.read())) {
        out_strb_V_1_payload_A = grp_mnist_lstm_fu_456_out_r_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_load_B.read())) {
        out_strb_V_1_payload_B = grp_mnist_lstm_fu_456_out_r_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_load_A.read())) {
        out_user_V_1_payload_A = grp_mnist_lstm_fu_456_out_r_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_load_B.read())) {
        out_user_V_1_payload_B = grp_mnist_lstm_fu_456_out_r_TUSER.read();
    }
}

void LSTM_Top::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void LSTM_Top::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void LSTM_Top::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void LSTM_Top::thread_ap_block_state3_on_subcall_done() {
    ap_block_state3_on_subcall_done = esl_seteq<1,1,1>(ap_const_logic_0, (ap_sync_grp_mnist_lstm_fu_456_ap_ready.read() & ap_sync_grp_mnist_lstm_fu_456_ap_done.read()));
}

void LSTM_Top::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_dest_V_1_ack_in.read()));
}

void LSTM_Top::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void LSTM_Top::thread_ap_sync_grp_mnist_lstm_fu_456_ap_done() {
    ap_sync_grp_mnist_lstm_fu_456_ap_done = (grp_mnist_lstm_fu_456_ap_done.read() | ap_sync_reg_grp_mnist_lstm_fu_456_ap_done.read());
}

void LSTM_Top::thread_ap_sync_grp_mnist_lstm_fu_456_ap_ready() {
    ap_sync_grp_mnist_lstm_fu_456_ap_ready = (grp_mnist_lstm_fu_456_ap_ready.read() | ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready.read());
}

void LSTM_Top::thread_grp_mnist_lstm_fu_456_ap_continue() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        grp_mnist_lstm_fu_456_ap_continue = ap_const_logic_1;
    } else {
        grp_mnist_lstm_fu_456_ap_continue = ap_const_logic_0;
    }
}

void LSTM_Top::thread_grp_mnist_lstm_fu_456_ap_start() {
    grp_mnist_lstm_fu_456_ap_start = grp_mnist_lstm_fu_456_ap_start_reg.read();
}

void LSTM_Top::thread_grp_mnist_lstm_fu_456_in_r_TVALID() {
    grp_mnist_lstm_fu_456_in_r_TVALID = in_dest_V_0_state.read()[0];
}

void LSTM_Top::thread_grp_mnist_lstm_fu_456_out_r_TREADY() {
    grp_mnist_lstm_fu_456_out_r_TREADY = ((out_data_V_1_ack_in.read() & 
  ap_CS_fsm_state3.read()) | (out_keep_V_1_ack_in.read() & 
  ap_CS_fsm_state3.read()) | (out_strb_V_1_ack_in.read() & 
  ap_CS_fsm_state3.read()) | (out_user_V_1_ack_in.read() & 
  ap_CS_fsm_state3.read()) | (out_last_V_1_ack_in.read() & 
  ap_CS_fsm_state3.read()) | (out_id_V_1_ack_in.read() & 
  ap_CS_fsm_state3.read()) | (out_dest_V_1_ack_in.read() & 
  ap_CS_fsm_state3.read()));
}

void LSTM_Top::thread_in_data_V_0_ack_in() {
    in_data_V_0_ack_in = in_data_V_0_state.read()[1];
}

void LSTM_Top::thread_in_data_V_0_ack_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_data_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY.read();
    } else {
        in_data_V_0_ack_out = ap_const_logic_0;
    }
}

void LSTM_Top::thread_in_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_sel.read())) {
        in_data_V_0_data_out = in_data_V_0_payload_B.read();
    } else {
        in_data_V_0_data_out = in_data_V_0_payload_A.read();
    }
}

void LSTM_Top::thread_in_data_V_0_load_A() {
    in_data_V_0_load_A = (in_data_V_0_state_cmp_full.read() & ~in_data_V_0_sel_wr.read());
}

void LSTM_Top::thread_in_data_V_0_load_B() {
    in_data_V_0_load_B = (in_data_V_0_sel_wr.read() & in_data_V_0_state_cmp_full.read());
}

void LSTM_Top::thread_in_data_V_0_sel() {
    in_data_V_0_sel = in_data_V_0_sel_rd.read();
}

void LSTM_Top::thread_in_data_V_0_state_cmp_full() {
    in_data_V_0_state_cmp_full =  (sc_logic) ((!in_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_in_data_V_0_vld_in() {
    in_data_V_0_vld_in = in_r_TVALID.read();
}

void LSTM_Top::thread_in_data_V_0_vld_out() {
    in_data_V_0_vld_out = in_data_V_0_state.read()[0];
}

void LSTM_Top::thread_in_dest_V_0_ack_in() {
    in_dest_V_0_ack_in = in_dest_V_0_state.read()[1];
}

void LSTM_Top::thread_in_dest_V_0_ack_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_dest_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY.read();
    } else {
        in_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void LSTM_Top::thread_in_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_dest_V_0_sel.read())) {
        in_dest_V_0_data_out = in_dest_V_0_payload_B.read();
    } else {
        in_dest_V_0_data_out = in_dest_V_0_payload_A.read();
    }
}

void LSTM_Top::thread_in_dest_V_0_load_A() {
    in_dest_V_0_load_A = (in_dest_V_0_state_cmp_full.read() & ~in_dest_V_0_sel_wr.read());
}

void LSTM_Top::thread_in_dest_V_0_load_B() {
    in_dest_V_0_load_B = (in_dest_V_0_sel_wr.read() & in_dest_V_0_state_cmp_full.read());
}

void LSTM_Top::thread_in_dest_V_0_sel() {
    in_dest_V_0_sel = in_dest_V_0_sel_rd.read();
}

void LSTM_Top::thread_in_dest_V_0_state_cmp_full() {
    in_dest_V_0_state_cmp_full =  (sc_logic) ((!in_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_in_dest_V_0_vld_in() {
    in_dest_V_0_vld_in = in_r_TVALID.read();
}

void LSTM_Top::thread_in_dest_V_0_vld_out() {
    in_dest_V_0_vld_out = in_dest_V_0_state.read()[0];
}

void LSTM_Top::thread_in_id_V_0_ack_in() {
    in_id_V_0_ack_in = in_id_V_0_state.read()[1];
}

void LSTM_Top::thread_in_id_V_0_ack_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_id_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY.read();
    } else {
        in_id_V_0_ack_out = ap_const_logic_0;
    }
}

void LSTM_Top::thread_in_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_id_V_0_sel.read())) {
        in_id_V_0_data_out = in_id_V_0_payload_B.read();
    } else {
        in_id_V_0_data_out = in_id_V_0_payload_A.read();
    }
}

void LSTM_Top::thread_in_id_V_0_load_A() {
    in_id_V_0_load_A = (in_id_V_0_state_cmp_full.read() & ~in_id_V_0_sel_wr.read());
}

void LSTM_Top::thread_in_id_V_0_load_B() {
    in_id_V_0_load_B = (in_id_V_0_sel_wr.read() & in_id_V_0_state_cmp_full.read());
}

void LSTM_Top::thread_in_id_V_0_sel() {
    in_id_V_0_sel = in_id_V_0_sel_rd.read();
}

void LSTM_Top::thread_in_id_V_0_state_cmp_full() {
    in_id_V_0_state_cmp_full =  (sc_logic) ((!in_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_in_id_V_0_vld_in() {
    in_id_V_0_vld_in = in_r_TVALID.read();
}

void LSTM_Top::thread_in_id_V_0_vld_out() {
    in_id_V_0_vld_out = in_id_V_0_state.read()[0];
}

void LSTM_Top::thread_in_keep_V_0_ack_in() {
    in_keep_V_0_ack_in = in_keep_V_0_state.read()[1];
}

void LSTM_Top::thread_in_keep_V_0_ack_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_keep_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY.read();
    } else {
        in_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void LSTM_Top::thread_in_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_keep_V_0_sel.read())) {
        in_keep_V_0_data_out = in_keep_V_0_payload_B.read();
    } else {
        in_keep_V_0_data_out = in_keep_V_0_payload_A.read();
    }
}

void LSTM_Top::thread_in_keep_V_0_load_A() {
    in_keep_V_0_load_A = (in_keep_V_0_state_cmp_full.read() & ~in_keep_V_0_sel_wr.read());
}

void LSTM_Top::thread_in_keep_V_0_load_B() {
    in_keep_V_0_load_B = (in_keep_V_0_sel_wr.read() & in_keep_V_0_state_cmp_full.read());
}

void LSTM_Top::thread_in_keep_V_0_sel() {
    in_keep_V_0_sel = in_keep_V_0_sel_rd.read();
}

void LSTM_Top::thread_in_keep_V_0_state_cmp_full() {
    in_keep_V_0_state_cmp_full =  (sc_logic) ((!in_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_in_keep_V_0_vld_in() {
    in_keep_V_0_vld_in = in_r_TVALID.read();
}

void LSTM_Top::thread_in_keep_V_0_vld_out() {
    in_keep_V_0_vld_out = in_keep_V_0_state.read()[0];
}

void LSTM_Top::thread_in_last_V_0_ack_in() {
    in_last_V_0_ack_in = in_last_V_0_state.read()[1];
}

void LSTM_Top::thread_in_last_V_0_ack_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_last_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY.read();
    } else {
        in_last_V_0_ack_out = ap_const_logic_0;
    }
}

void LSTM_Top::thread_in_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_sel.read())) {
        in_last_V_0_data_out = in_last_V_0_payload_B.read();
    } else {
        in_last_V_0_data_out = in_last_V_0_payload_A.read();
    }
}

void LSTM_Top::thread_in_last_V_0_load_A() {
    in_last_V_0_load_A = (in_last_V_0_state_cmp_full.read() & ~in_last_V_0_sel_wr.read());
}

void LSTM_Top::thread_in_last_V_0_load_B() {
    in_last_V_0_load_B = (in_last_V_0_sel_wr.read() & in_last_V_0_state_cmp_full.read());
}

void LSTM_Top::thread_in_last_V_0_sel() {
    in_last_V_0_sel = in_last_V_0_sel_rd.read();
}

void LSTM_Top::thread_in_last_V_0_state_cmp_full() {
    in_last_V_0_state_cmp_full =  (sc_logic) ((!in_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_in_last_V_0_vld_in() {
    in_last_V_0_vld_in = in_r_TVALID.read();
}

void LSTM_Top::thread_in_last_V_0_vld_out() {
    in_last_V_0_vld_out = in_last_V_0_state.read()[0];
}

void LSTM_Top::thread_in_r_TREADY() {
    in_r_TREADY = in_dest_V_0_state.read()[1];
}

void LSTM_Top::thread_in_strb_V_0_ack_in() {
    in_strb_V_0_ack_in = in_strb_V_0_state.read()[1];
}

void LSTM_Top::thread_in_strb_V_0_ack_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_strb_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY.read();
    } else {
        in_strb_V_0_ack_out = ap_const_logic_0;
    }
}

void LSTM_Top::thread_in_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_strb_V_0_sel.read())) {
        in_strb_V_0_data_out = in_strb_V_0_payload_B.read();
    } else {
        in_strb_V_0_data_out = in_strb_V_0_payload_A.read();
    }
}

void LSTM_Top::thread_in_strb_V_0_load_A() {
    in_strb_V_0_load_A = (in_strb_V_0_state_cmp_full.read() & ~in_strb_V_0_sel_wr.read());
}

void LSTM_Top::thread_in_strb_V_0_load_B() {
    in_strb_V_0_load_B = (in_strb_V_0_sel_wr.read() & in_strb_V_0_state_cmp_full.read());
}

void LSTM_Top::thread_in_strb_V_0_sel() {
    in_strb_V_0_sel = in_strb_V_0_sel_rd.read();
}

void LSTM_Top::thread_in_strb_V_0_state_cmp_full() {
    in_strb_V_0_state_cmp_full =  (sc_logic) ((!in_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_in_strb_V_0_vld_in() {
    in_strb_V_0_vld_in = in_r_TVALID.read();
}

void LSTM_Top::thread_in_strb_V_0_vld_out() {
    in_strb_V_0_vld_out = in_strb_V_0_state.read()[0];
}

void LSTM_Top::thread_in_user_V_0_ack_in() {
    in_user_V_0_ack_in = in_user_V_0_state.read()[1];
}

void LSTM_Top::thread_in_user_V_0_ack_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_user_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY.read();
    } else {
        in_user_V_0_ack_out = ap_const_logic_0;
    }
}

void LSTM_Top::thread_in_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_user_V_0_sel.read())) {
        in_user_V_0_data_out = in_user_V_0_payload_B.read();
    } else {
        in_user_V_0_data_out = in_user_V_0_payload_A.read();
    }
}

void LSTM_Top::thread_in_user_V_0_load_A() {
    in_user_V_0_load_A = (in_user_V_0_state_cmp_full.read() & ~in_user_V_0_sel_wr.read());
}

void LSTM_Top::thread_in_user_V_0_load_B() {
    in_user_V_0_load_B = (in_user_V_0_sel_wr.read() & in_user_V_0_state_cmp_full.read());
}

void LSTM_Top::thread_in_user_V_0_sel() {
    in_user_V_0_sel = in_user_V_0_sel_rd.read();
}

void LSTM_Top::thread_in_user_V_0_state_cmp_full() {
    in_user_V_0_state_cmp_full =  (sc_logic) ((!in_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_in_user_V_0_vld_in() {
    in_user_V_0_vld_in = in_r_TVALID.read();
}

void LSTM_Top::thread_in_user_V_0_vld_out() {
    in_user_V_0_vld_out = in_user_V_0_state.read()[0];
}

void LSTM_Top::thread_out_data_V_1_ack_in() {
    out_data_V_1_ack_in = out_data_V_1_state.read()[1];
}

void LSTM_Top::thread_out_data_V_1_ack_out() {
    out_data_V_1_ack_out = out_r_TREADY.read();
}

void LSTM_Top::thread_out_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_sel.read())) {
        out_data_V_1_data_out = out_data_V_1_payload_B.read();
    } else {
        out_data_V_1_data_out = out_data_V_1_payload_A.read();
    }
}

void LSTM_Top::thread_out_data_V_1_load_A() {
    out_data_V_1_load_A = (out_data_V_1_state_cmp_full.read() & ~out_data_V_1_sel_wr.read());
}

void LSTM_Top::thread_out_data_V_1_load_B() {
    out_data_V_1_load_B = (out_data_V_1_sel_wr.read() & out_data_V_1_state_cmp_full.read());
}

void LSTM_Top::thread_out_data_V_1_sel() {
    out_data_V_1_sel = out_data_V_1_sel_rd.read();
}

void LSTM_Top::thread_out_data_V_1_state_cmp_full() {
    out_data_V_1_state_cmp_full =  (sc_logic) ((!out_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_out_data_V_1_vld_in() {
    out_data_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID.read();
}

void LSTM_Top::thread_out_data_V_1_vld_out() {
    out_data_V_1_vld_out = out_data_V_1_state.read()[0];
}

void LSTM_Top::thread_out_dest_V_1_ack_in() {
    out_dest_V_1_ack_in = out_dest_V_1_state.read()[1];
}

void LSTM_Top::thread_out_dest_V_1_ack_out() {
    out_dest_V_1_ack_out = out_r_TREADY.read();
}

void LSTM_Top::thread_out_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_dest_V_1_sel.read())) {
        out_dest_V_1_data_out = out_dest_V_1_payload_B.read();
    } else {
        out_dest_V_1_data_out = out_dest_V_1_payload_A.read();
    }
}

void LSTM_Top::thread_out_dest_V_1_load_A() {
    out_dest_V_1_load_A = (out_dest_V_1_state_cmp_full.read() & ~out_dest_V_1_sel_wr.read());
}

void LSTM_Top::thread_out_dest_V_1_load_B() {
    out_dest_V_1_load_B = (out_dest_V_1_sel_wr.read() & out_dest_V_1_state_cmp_full.read());
}

void LSTM_Top::thread_out_dest_V_1_sel() {
    out_dest_V_1_sel = out_dest_V_1_sel_rd.read();
}

void LSTM_Top::thread_out_dest_V_1_state_cmp_full() {
    out_dest_V_1_state_cmp_full =  (sc_logic) ((!out_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_out_dest_V_1_vld_in() {
    out_dest_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID.read();
}

void LSTM_Top::thread_out_dest_V_1_vld_out() {
    out_dest_V_1_vld_out = out_dest_V_1_state.read()[0];
}

void LSTM_Top::thread_out_id_V_1_ack_in() {
    out_id_V_1_ack_in = out_id_V_1_state.read()[1];
}

void LSTM_Top::thread_out_id_V_1_ack_out() {
    out_id_V_1_ack_out = out_r_TREADY.read();
}

void LSTM_Top::thread_out_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_id_V_1_sel.read())) {
        out_id_V_1_data_out = out_id_V_1_payload_B.read();
    } else {
        out_id_V_1_data_out = out_id_V_1_payload_A.read();
    }
}

void LSTM_Top::thread_out_id_V_1_load_A() {
    out_id_V_1_load_A = (out_id_V_1_state_cmp_full.read() & ~out_id_V_1_sel_wr.read());
}

void LSTM_Top::thread_out_id_V_1_load_B() {
    out_id_V_1_load_B = (out_id_V_1_sel_wr.read() & out_id_V_1_state_cmp_full.read());
}

void LSTM_Top::thread_out_id_V_1_sel() {
    out_id_V_1_sel = out_id_V_1_sel_rd.read();
}

void LSTM_Top::thread_out_id_V_1_state_cmp_full() {
    out_id_V_1_state_cmp_full =  (sc_logic) ((!out_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_out_id_V_1_vld_in() {
    out_id_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID.read();
}

void LSTM_Top::thread_out_id_V_1_vld_out() {
    out_id_V_1_vld_out = out_id_V_1_state.read()[0];
}

void LSTM_Top::thread_out_keep_V_1_ack_in() {
    out_keep_V_1_ack_in = out_keep_V_1_state.read()[1];
}

void LSTM_Top::thread_out_keep_V_1_ack_out() {
    out_keep_V_1_ack_out = out_r_TREADY.read();
}

void LSTM_Top::thread_out_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_keep_V_1_sel.read())) {
        out_keep_V_1_data_out = out_keep_V_1_payload_B.read();
    } else {
        out_keep_V_1_data_out = out_keep_V_1_payload_A.read();
    }
}

void LSTM_Top::thread_out_keep_V_1_load_A() {
    out_keep_V_1_load_A = (out_keep_V_1_state_cmp_full.read() & ~out_keep_V_1_sel_wr.read());
}

void LSTM_Top::thread_out_keep_V_1_load_B() {
    out_keep_V_1_load_B = (out_keep_V_1_sel_wr.read() & out_keep_V_1_state_cmp_full.read());
}

void LSTM_Top::thread_out_keep_V_1_sel() {
    out_keep_V_1_sel = out_keep_V_1_sel_rd.read();
}

void LSTM_Top::thread_out_keep_V_1_state_cmp_full() {
    out_keep_V_1_state_cmp_full =  (sc_logic) ((!out_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_out_keep_V_1_vld_in() {
    out_keep_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID.read();
}

void LSTM_Top::thread_out_keep_V_1_vld_out() {
    out_keep_V_1_vld_out = out_keep_V_1_state.read()[0];
}

void LSTM_Top::thread_out_last_V_1_ack_in() {
    out_last_V_1_ack_in = out_last_V_1_state.read()[1];
}

void LSTM_Top::thread_out_last_V_1_ack_out() {
    out_last_V_1_ack_out = out_r_TREADY.read();
}

void LSTM_Top::thread_out_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_sel.read())) {
        out_last_V_1_data_out = out_last_V_1_payload_B.read();
    } else {
        out_last_V_1_data_out = out_last_V_1_payload_A.read();
    }
}

void LSTM_Top::thread_out_last_V_1_load_A() {
    out_last_V_1_load_A = (out_last_V_1_state_cmp_full.read() & ~out_last_V_1_sel_wr.read());
}

void LSTM_Top::thread_out_last_V_1_load_B() {
    out_last_V_1_load_B = (out_last_V_1_sel_wr.read() & out_last_V_1_state_cmp_full.read());
}

void LSTM_Top::thread_out_last_V_1_sel() {
    out_last_V_1_sel = out_last_V_1_sel_rd.read();
}

void LSTM_Top::thread_out_last_V_1_state_cmp_full() {
    out_last_V_1_state_cmp_full =  (sc_logic) ((!out_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_out_last_V_1_vld_in() {
    out_last_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID.read();
}

void LSTM_Top::thread_out_last_V_1_vld_out() {
    out_last_V_1_vld_out = out_last_V_1_state.read()[0];
}

void LSTM_Top::thread_out_r_TDATA() {
    out_r_TDATA = out_data_V_1_data_out.read();
}

void LSTM_Top::thread_out_r_TDEST() {
    out_r_TDEST = out_dest_V_1_data_out.read();
}

void LSTM_Top::thread_out_r_TID() {
    out_r_TID = out_id_V_1_data_out.read();
}

void LSTM_Top::thread_out_r_TKEEP() {
    out_r_TKEEP = out_keep_V_1_data_out.read();
}

void LSTM_Top::thread_out_r_TLAST() {
    out_r_TLAST = out_last_V_1_data_out.read();
}

void LSTM_Top::thread_out_r_TSTRB() {
    out_r_TSTRB = out_strb_V_1_data_out.read();
}

void LSTM_Top::thread_out_r_TUSER() {
    out_r_TUSER = out_user_V_1_data_out.read();
}

void LSTM_Top::thread_out_r_TVALID() {
    out_r_TVALID = out_dest_V_1_state.read()[0];
}

void LSTM_Top::thread_out_strb_V_1_ack_in() {
    out_strb_V_1_ack_in = out_strb_V_1_state.read()[1];
}

void LSTM_Top::thread_out_strb_V_1_ack_out() {
    out_strb_V_1_ack_out = out_r_TREADY.read();
}

void LSTM_Top::thread_out_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_strb_V_1_sel.read())) {
        out_strb_V_1_data_out = out_strb_V_1_payload_B.read();
    } else {
        out_strb_V_1_data_out = out_strb_V_1_payload_A.read();
    }
}

void LSTM_Top::thread_out_strb_V_1_load_A() {
    out_strb_V_1_load_A = (out_strb_V_1_state_cmp_full.read() & ~out_strb_V_1_sel_wr.read());
}

void LSTM_Top::thread_out_strb_V_1_load_B() {
    out_strb_V_1_load_B = (out_strb_V_1_sel_wr.read() & out_strb_V_1_state_cmp_full.read());
}

void LSTM_Top::thread_out_strb_V_1_sel() {
    out_strb_V_1_sel = out_strb_V_1_sel_rd.read();
}

void LSTM_Top::thread_out_strb_V_1_state_cmp_full() {
    out_strb_V_1_state_cmp_full =  (sc_logic) ((!out_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_out_strb_V_1_vld_in() {
    out_strb_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID.read();
}

void LSTM_Top::thread_out_strb_V_1_vld_out() {
    out_strb_V_1_vld_out = out_strb_V_1_state.read()[0];
}

void LSTM_Top::thread_out_user_V_1_ack_in() {
    out_user_V_1_ack_in = out_user_V_1_state.read()[1];
}

void LSTM_Top::thread_out_user_V_1_ack_out() {
    out_user_V_1_ack_out = out_r_TREADY.read();
}

void LSTM_Top::thread_out_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_user_V_1_sel.read())) {
        out_user_V_1_data_out = out_user_V_1_payload_B.read();
    } else {
        out_user_V_1_data_out = out_user_V_1_payload_A.read();
    }
}

void LSTM_Top::thread_out_user_V_1_load_A() {
    out_user_V_1_load_A = (out_user_V_1_state_cmp_full.read() & ~out_user_V_1_sel_wr.read());
}

void LSTM_Top::thread_out_user_V_1_load_B() {
    out_user_V_1_load_B = (out_user_V_1_sel_wr.read() & out_user_V_1_state_cmp_full.read());
}

void LSTM_Top::thread_out_user_V_1_sel() {
    out_user_V_1_sel = out_user_V_1_sel_rd.read();
}

void LSTM_Top::thread_out_user_V_1_state_cmp_full() {
    out_user_V_1_state_cmp_full =  (sc_logic) ((!out_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void LSTM_Top::thread_out_user_V_1_vld_in() {
    out_user_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID.read();
}

void LSTM_Top::thread_out_user_V_1_vld_out() {
    out_user_V_1_vld_out = out_user_V_1_state.read()[0];
}

void LSTM_Top::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, out_keep_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, out_strb_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, out_user_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, out_id_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, out_dest_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_dest_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void LSTM_Top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TDATA\" :  \"" << in_r_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TVALID\" :  \"" << in_r_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_r_TREADY\" :  \"" << in_r_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TKEEP\" :  \"" << in_r_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TSTRB\" :  \"" << in_r_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TUSER\" :  \"" << in_r_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TLAST\" :  \"" << in_r_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TID\" :  \"" << in_r_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TDEST\" :  \"" << in_r_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TDATA\" :  \"" << out_r_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TVALID\" :  \"" << out_r_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_TREADY\" :  \"" << out_r_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TKEEP\" :  \"" << out_r_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TSTRB\" :  \"" << out_r_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TUSER\" :  \"" << out_r_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TLAST\" :  \"" << out_r_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TID\" :  \"" << out_r_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TDEST\" :  \"" << out_r_TDEST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

