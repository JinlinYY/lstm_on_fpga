// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mnist_lstm_Loop_2_pr.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mnist_lstm_Loop_2_pr::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mnist_lstm_Loop_2_pr::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> mnist_lstm_Loop_2_pr::ap_ST_fsm_state1 = "1";
const sc_lv<3> mnist_lstm_Loop_2_pr::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> mnist_lstm_Loop_2_pr::ap_ST_fsm_state4 = "100";
const sc_lv<32> mnist_lstm_Loop_2_pr::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool mnist_lstm_Loop_2_pr::ap_const_boolean_1 = true;
const sc_lv<32> mnist_lstm_Loop_2_pr::ap_const_lv32_1 = "1";
const bool mnist_lstm_Loop_2_pr::ap_const_boolean_0 = false;
const sc_lv<1> mnist_lstm_Loop_2_pr::ap_const_lv1_0 = "0";
const sc_lv<1> mnist_lstm_Loop_2_pr::ap_const_lv1_1 = "1";
const sc_lv<2> mnist_lstm_Loop_2_pr::ap_const_lv2_0 = "00";
const sc_lv<4> mnist_lstm_Loop_2_pr::ap_const_lv4_F = "1111";
const sc_lv<2> mnist_lstm_Loop_2_pr::ap_const_lv2_2 = "10";
const sc_lv<2> mnist_lstm_Loop_2_pr::ap_const_lv2_1 = "1";
const sc_lv<32> mnist_lstm_Loop_2_pr::ap_const_lv32_2 = "10";

mnist_lstm_Loop_2_pr::mnist_lstm_Loop_2_pr(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( res_0_empty_n );
    sensitive << ( res_1_empty_n );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( out_r_TREADY );
    sensitive << ( exitcond_i_reg_161 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_i_fu_119_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_exitcond_i_fu_119_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i1_i_reg_108 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_fu_125_p2);
    sensitive << ( i1_i_reg_108 );

    SC_METHOD(thread_last_assign_fu_131_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i1_i_reg_108 );
    sensitive << ( exitcond_i_fu_119_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_161 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( v_assign_load_phi_i_fu_141_p3 );

    SC_METHOD(thread_out_r_TDATA_blk_n);
    sensitive << ( out_r_TREADY );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_reg_161 );

    SC_METHOD(thread_out_r_TDEST);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_161 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_r_TID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_161 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_r_TKEEP);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_161 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_161 );
    sensitive << ( last_assign_reg_170 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_r_TSTRB);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_161 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_r_TUSER);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_161 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_161 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_res_0_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( res_0_empty_n );

    SC_METHOD(thread_res_0_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( res_0_empty_n );
    sensitive << ( res_1_empty_n );

    SC_METHOD(thread_res_1_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( res_1_empty_n );

    SC_METHOD(thread_res_1_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( res_0_empty_n );
    sensitive << ( res_1_empty_n );

    SC_METHOD(thread_tmp_fu_137_p1);
    sensitive << ( i1_i_reg_108 );

    SC_METHOD(thread_v_assign_load_phi_i_fu_141_p3);
    sensitive << ( res_0_read_reg_151 );
    sensitive << ( res_1_read_reg_156 );
    sensitive << ( tmp_reg_175 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( res_0_empty_n );
    sensitive << ( res_1_empty_n );
    sensitive << ( exitcond_i_fu_119_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mnist_lstm_Loop_2_pr_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, res_0_dout, "(port)res_0_dout");
    sc_trace(mVcdFile, res_0_empty_n, "(port)res_0_empty_n");
    sc_trace(mVcdFile, res_0_read, "(port)res_0_read");
    sc_trace(mVcdFile, res_1_dout, "(port)res_1_dout");
    sc_trace(mVcdFile, res_1_empty_n, "(port)res_1_empty_n");
    sc_trace(mVcdFile, res_1_read, "(port)res_1_read");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
    sc_trace(mVcdFile, out_r_TKEEP, "(port)out_r_TKEEP");
    sc_trace(mVcdFile, out_r_TSTRB, "(port)out_r_TSTRB");
    sc_trace(mVcdFile, out_r_TUSER, "(port)out_r_TUSER");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
    sc_trace(mVcdFile, out_r_TID, "(port)out_r_TID");
    sc_trace(mVcdFile, out_r_TDEST, "(port)out_r_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, res_0_blk_n, "res_0_blk_n");
    sc_trace(mVcdFile, res_1_blk_n, "res_1_blk_n");
    sc_trace(mVcdFile, out_r_TDATA_blk_n, "out_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_i_reg_161, "exitcond_i_reg_161");
    sc_trace(mVcdFile, i1_i_reg_108, "i1_i_reg_108");
    sc_trace(mVcdFile, res_0_read_reg_151, "res_0_read_reg_151");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, res_1_read_reg_156, "res_1_read_reg_156");
    sc_trace(mVcdFile, exitcond_i_fu_119_p2, "exitcond_i_fu_119_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_125_p2, "i_fu_125_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, last_assign_fu_131_p2, "last_assign_fu_131_p2");
    sc_trace(mVcdFile, last_assign_reg_170, "last_assign_reg_170");
    sc_trace(mVcdFile, tmp_fu_137_p1, "tmp_fu_137_p1");
    sc_trace(mVcdFile, tmp_reg_175, "tmp_reg_175");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, v_assign_load_phi_i_fu_141_p3, "v_assign_load_phi_i_fu_141_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

mnist_lstm_Loop_2_pr::~mnist_lstm_Loop_2_pr() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void mnist_lstm_Loop_2_pr::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, res_0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, res_1_empty_n.read())))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, res_0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, res_1_empty_n.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_119_p2.read()))) {
        i1_i_reg_108 = i_fu_125_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, res_0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, res_1_empty_n.read())))) {
        i1_i_reg_108 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_i_reg_161 = exitcond_i_fu_119_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_119_p2.read()))) {
        last_assign_reg_170 = last_assign_fu_131_p2.read();
        tmp_reg_175 = tmp_fu_137_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, res_0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, res_1_empty_n.read())))) {
        res_0_read_reg_151 = res_0_dout.read();
        res_1_read_reg_156 = res_1_dout.read();
    }
}

void mnist_lstm_Loop_2_pr::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void mnist_lstm_Loop_2_pr::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mnist_lstm_Loop_2_pr::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void mnist_lstm_Loop_2_pr::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mnist_lstm_Loop_2_pr::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mnist_lstm_Loop_2_pr::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()));
}

void mnist_lstm_Loop_2_pr::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()));
}

void mnist_lstm_Loop_2_pr::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, res_0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, res_1_empty_n.read()));
}

void mnist_lstm_Loop_2_pr::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mnist_lstm_Loop_2_pr::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(exitcond_i_reg_161.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, out_r_TREADY.read()));
}

void mnist_lstm_Loop_2_pr::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mnist_lstm_Loop_2_pr::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_i_fu_119_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void mnist_lstm_Loop_2_pr::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void mnist_lstm_Loop_2_pr::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void mnist_lstm_Loop_2_pr::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mnist_lstm_Loop_2_pr::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void mnist_lstm_Loop_2_pr::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mnist_lstm_Loop_2_pr::thread_exitcond_i_fu_119_p2() {
    exitcond_i_fu_119_p2 = (!i1_i_reg_108.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i1_i_reg_108.read() == ap_const_lv2_2);
}

void mnist_lstm_Loop_2_pr::thread_i_fu_125_p2() {
    i_fu_125_p2 = (!i1_i_reg_108.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i1_i_reg_108.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void mnist_lstm_Loop_2_pr::thread_last_assign_fu_131_p2() {
    last_assign_fu_131_p2 = (!i1_i_reg_108.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(i1_i_reg_108.read() == ap_const_lv2_1);
}

void mnist_lstm_Loop_2_pr::thread_out_r_TDATA() {
    out_r_TDATA = v_assign_load_phi_i_fu_141_p3.read();
}

void mnist_lstm_Loop_2_pr::thread_out_r_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_i_reg_161.read(), ap_const_lv1_0))) {
        out_r_TDATA_blk_n = out_r_TREADY.read();
    } else {
        out_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void mnist_lstm_Loop_2_pr::thread_out_r_TDEST() {
    out_r_TDEST = ap_const_lv1_0;
}

void mnist_lstm_Loop_2_pr::thread_out_r_TID() {
    out_r_TID = ap_const_lv1_0;
}

void mnist_lstm_Loop_2_pr::thread_out_r_TKEEP() {
    out_r_TKEEP = ap_const_lv4_F;
}

void mnist_lstm_Loop_2_pr::thread_out_r_TLAST() {
    out_r_TLAST = last_assign_reg_170.read();
}

void mnist_lstm_Loop_2_pr::thread_out_r_TSTRB() {
    out_r_TSTRB = ap_const_lv4_F;
}

void mnist_lstm_Loop_2_pr::thread_out_r_TUSER() {
    out_r_TUSER = ap_const_lv1_0;
}

void mnist_lstm_Loop_2_pr::thread_out_r_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_i_reg_161.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_r_TVALID = ap_const_logic_1;
    } else {
        out_r_TVALID = ap_const_logic_0;
    }
}

void mnist_lstm_Loop_2_pr::thread_res_0_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        res_0_blk_n = res_0_empty_n.read();
    } else {
        res_0_blk_n = ap_const_logic_1;
    }
}

void mnist_lstm_Loop_2_pr::thread_res_0_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, res_0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, res_1_empty_n.read())))) {
        res_0_read = ap_const_logic_1;
    } else {
        res_0_read = ap_const_logic_0;
    }
}

void mnist_lstm_Loop_2_pr::thread_res_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        res_1_blk_n = res_1_empty_n.read();
    } else {
        res_1_blk_n = ap_const_logic_1;
    }
}

void mnist_lstm_Loop_2_pr::thread_res_1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, res_0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, res_1_empty_n.read())))) {
        res_1_read = ap_const_logic_1;
    } else {
        res_1_read = ap_const_logic_0;
    }
}

void mnist_lstm_Loop_2_pr::thread_tmp_fu_137_p1() {
    tmp_fu_137_p1 = i1_i_reg_108.read().range(1-1, 0);
}

void mnist_lstm_Loop_2_pr::thread_v_assign_load_phi_i_fu_141_p3() {
    v_assign_load_phi_i_fu_141_p3 = (!tmp_reg_175.read()[0].is_01())? sc_lv<32>(): ((tmp_reg_175.read()[0].to_bool())? res_1_read_reg_156.read(): res_0_read_reg_151.read());
}

void mnist_lstm_Loop_2_pr::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, res_0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, res_1_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_i_fu_119_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_i_fu_119_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

