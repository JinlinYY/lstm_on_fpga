// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mnist_lstm_HH_
#define _mnist_lstm_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mnist_lstm_Loop_1_pr.h"
#include "infer.h"
#include "mnist_lstm_Loop_2_pr.h"
#include "mnist_lstm_img_dat.h"
#include "fifo_w32_d2_A.h"
#include "start_for_mnist_lciv.h"

namespace ap_rtl {

struct mnist_lstm : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > in_r_TDATA;
    sc_in< sc_lv<4> > in_r_TKEEP;
    sc_in< sc_lv<4> > in_r_TSTRB;
    sc_in< sc_lv<1> > in_r_TUSER;
    sc_in< sc_lv<1> > in_r_TLAST;
    sc_in< sc_lv<1> > in_r_TID;
    sc_in< sc_lv<1> > in_r_TDEST;
    sc_out< sc_lv<32> > out_r_TDATA;
    sc_out< sc_lv<4> > out_r_TKEEP;
    sc_out< sc_lv<4> > out_r_TSTRB;
    sc_out< sc_lv<1> > out_r_TUSER;
    sc_out< sc_lv<1> > out_r_TLAST;
    sc_out< sc_lv<1> > out_r_TID;
    sc_out< sc_lv<1> > out_r_TDEST;
    sc_in< sc_logic > in_r_TVALID;
    sc_out< sc_logic > in_r_TREADY;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_var_for_const2;
    sc_signal< sc_lv<32> > ap_var_for_const1;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    mnist_lstm(sc_module_name name);
    SC_HAS_PROCESS(mnist_lstm);

    ~mnist_lstm();

    sc_trace_file* mVcdFile;

    mnist_lstm_img_dat* img_dat_U;
    mnist_lstm_Loop_1_pr* mnist_lstm_Loop_1_pr_U0;
    infer* infer_U0;
    mnist_lstm_Loop_2_pr* mnist_lstm_Loop_2_pr_U0;
    fifo_w32_d2_A* res_0_c_U;
    fifo_w32_d2_A* res_1_c_U;
    start_for_mnist_lciv* start_for_mnist_lciv_U;
    sc_signal< sc_lv<32> > img_dat_i_q0;
    sc_signal< sc_lv<32> > img_dat_t_q0;
    sc_signal< sc_logic > mnist_lstm_Loop_1_pr_U0_ap_start;
    sc_signal< sc_logic > mnist_lstm_Loop_1_pr_U0_ap_done;
    sc_signal< sc_logic > mnist_lstm_Loop_1_pr_U0_ap_continue;
    sc_signal< sc_logic > mnist_lstm_Loop_1_pr_U0_ap_idle;
    sc_signal< sc_logic > mnist_lstm_Loop_1_pr_U0_ap_ready;
    sc_signal< sc_logic > mnist_lstm_Loop_1_pr_U0_in_r_TREADY;
    sc_signal< sc_lv<8> > mnist_lstm_Loop_1_pr_U0_img_dat_address0;
    sc_signal< sc_logic > mnist_lstm_Loop_1_pr_U0_img_dat_ce0;
    sc_signal< sc_logic > mnist_lstm_Loop_1_pr_U0_img_dat_we0;
    sc_signal< sc_lv<32> > mnist_lstm_Loop_1_pr_U0_img_dat_d0;
    sc_signal< sc_logic > ap_channel_done_img_dat;
    sc_signal< sc_logic > mnist_lstm_Loop_1_pr_U0_img_dat_full_n;
    sc_signal< sc_logic > infer_U0_ap_start;
    sc_signal< sc_logic > infer_U0_ap_done;
    sc_signal< sc_logic > infer_U0_ap_continue;
    sc_signal< sc_logic > infer_U0_ap_idle;
    sc_signal< sc_logic > infer_U0_ap_ready;
    sc_signal< sc_logic > infer_U0_start_out;
    sc_signal< sc_logic > infer_U0_start_write;
    sc_signal< sc_lv<8> > infer_U0_input_r_address0;
    sc_signal< sc_logic > infer_U0_input_r_ce0;
    sc_signal< sc_lv<32> > infer_U0_res_0_out_din;
    sc_signal< sc_logic > infer_U0_res_0_out_write;
    sc_signal< sc_lv<32> > infer_U0_res_1_out_din;
    sc_signal< sc_logic > infer_U0_res_1_out_write;
    sc_signal< sc_logic > mnist_lstm_Loop_2_pr_U0_ap_start;
    sc_signal< sc_logic > mnist_lstm_Loop_2_pr_U0_ap_done;
    sc_signal< sc_logic > mnist_lstm_Loop_2_pr_U0_ap_continue;
    sc_signal< sc_logic > mnist_lstm_Loop_2_pr_U0_ap_idle;
    sc_signal< sc_logic > mnist_lstm_Loop_2_pr_U0_ap_ready;
    sc_signal< sc_logic > mnist_lstm_Loop_2_pr_U0_res_0_read;
    sc_signal< sc_logic > mnist_lstm_Loop_2_pr_U0_res_1_read;
    sc_signal< sc_lv<32> > mnist_lstm_Loop_2_pr_U0_out_r_TDATA;
    sc_signal< sc_logic > mnist_lstm_Loop_2_pr_U0_out_r_TVALID;
    sc_signal< sc_lv<4> > mnist_lstm_Loop_2_pr_U0_out_r_TKEEP;
    sc_signal< sc_lv<4> > mnist_lstm_Loop_2_pr_U0_out_r_TSTRB;
    sc_signal< sc_lv<1> > mnist_lstm_Loop_2_pr_U0_out_r_TUSER;
    sc_signal< sc_lv<1> > mnist_lstm_Loop_2_pr_U0_out_r_TLAST;
    sc_signal< sc_lv<1> > mnist_lstm_Loop_2_pr_U0_out_r_TID;
    sc_signal< sc_lv<1> > mnist_lstm_Loop_2_pr_U0_out_r_TDEST;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > img_dat_i_full_n;
    sc_signal< sc_logic > img_dat_t_empty_n;
    sc_signal< sc_logic > res_0_c_full_n;
    sc_signal< sc_lv<32> > res_0_c_dout;
    sc_signal< sc_logic > res_0_c_empty_n;
    sc_signal< sc_logic > res_1_c_full_n;
    sc_signal< sc_lv<32> > res_1_c_dout;
    sc_signal< sc_logic > res_1_c_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > mnist_lstm_Loop_1_pr_U0_start_full_n;
    sc_signal< sc_logic > mnist_lstm_Loop_1_pr_U0_start_write;
    sc_signal< sc_lv<1> > start_for_mnist_lstm_Loop_2_pr_U0_din;
    sc_signal< sc_logic > start_for_mnist_lstm_Loop_2_pr_U0_full_n;
    sc_signal< sc_lv<1> > start_for_mnist_lstm_Loop_2_pr_U0_dout;
    sc_signal< sc_logic > start_for_mnist_lstm_Loop_2_pr_U0_empty_n;
    sc_signal< sc_logic > mnist_lstm_Loop_2_pr_U0_start_full_n;
    sc_signal< sc_logic > mnist_lstm_Loop_2_pr_U0_start_write;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_channel_done_img_dat();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_in_r_TREADY();
    void thread_infer_U0_ap_continue();
    void thread_infer_U0_ap_start();
    void thread_mnist_lstm_Loop_1_pr_U0_ap_continue();
    void thread_mnist_lstm_Loop_1_pr_U0_ap_start();
    void thread_mnist_lstm_Loop_1_pr_U0_img_dat_full_n();
    void thread_mnist_lstm_Loop_1_pr_U0_start_full_n();
    void thread_mnist_lstm_Loop_1_pr_U0_start_write();
    void thread_mnist_lstm_Loop_2_pr_U0_ap_continue();
    void thread_mnist_lstm_Loop_2_pr_U0_ap_start();
    void thread_mnist_lstm_Loop_2_pr_U0_start_full_n();
    void thread_mnist_lstm_Loop_2_pr_U0_start_write();
    void thread_out_r_TDATA();
    void thread_out_r_TDEST();
    void thread_out_r_TID();
    void thread_out_r_TKEEP();
    void thread_out_r_TLAST();
    void thread_out_r_TSTRB();
    void thread_out_r_TUSER();
    void thread_out_r_TVALID();
    void thread_start_for_mnist_lstm_Loop_2_pr_U0_din();
};

}

using namespace ap_rtl;

#endif
