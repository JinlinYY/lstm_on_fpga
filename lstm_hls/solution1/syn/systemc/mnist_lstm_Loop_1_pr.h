// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mnist_lstm_Loop_1_pr_HH_
#define _mnist_lstm_Loop_1_pr_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "LSTM_Top_fdiv_32nbkb.h"

namespace ap_rtl {

struct mnist_lstm_Loop_1_pr : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in_r_TDATA;
    sc_in< sc_logic > in_r_TVALID;
    sc_out< sc_logic > in_r_TREADY;
    sc_in< sc_lv<4> > in_r_TSTRB;
    sc_in< sc_lv<4> > in_r_TKEEP;
    sc_in< sc_lv<1> > in_r_TUSER;
    sc_in< sc_lv<1> > in_r_TLAST;
    sc_in< sc_lv<1> > in_r_TID;
    sc_in< sc_lv<1> > in_r_TDEST;
    sc_out< sc_lv<8> > img_dat_address0;
    sc_out< sc_logic > img_dat_ce0;
    sc_out< sc_logic > img_dat_we0;
    sc_out< sc_lv<32> > img_dat_d0;
    sc_signal< sc_lv<32> > ap_var_for_const0;


    // Module declarations
    mnist_lstm_Loop_1_pr(sc_module_name name);
    SC_HAS_PROCESS(mnist_lstm_Loop_1_pr);

    ~mnist_lstm_Loop_1_pr();

    sc_trace_file* mVcdFile;

    LSTM_Top_fdiv_32nbkb<1,16,32,32,32>* LSTM_Top_fdiv_32nbkb_U1;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond1_i_i_fu_100_p2;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter1_reg;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter10;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter11;
    sc_signal< bool > ap_block_state14_pp0_stage0_iter12;
    sc_signal< bool > ap_block_state15_pp0_stage0_iter13;
    sc_signal< bool > ap_block_state16_pp0_stage0_iter14;
    sc_signal< bool > ap_block_state17_pp0_stage0_iter15;
    sc_signal< bool > ap_block_state18_pp0_stage0_iter16;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter2_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter3_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter4_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter5_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter6_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter7_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter8_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter9_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter10_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter11_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter12_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter13_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter14_reg;
    sc_signal< sc_lv<8> > i_0_i_i_reg_83_pp0_iter15_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter1_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter2_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter3_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter4_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter5_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter6_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter7_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter8_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter9_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter10_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter11_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter12_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter13_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter14_reg;
    sc_signal< sc_lv<1> > exitcond1_i_i_reg_126_pp0_iter15_reg;
    sc_signal< sc_lv<8> > i_fu_106_p2;
    sc_signal< sc_lv<8> > i_reg_130;
    sc_signal< sc_lv<32> > grp_fu_95_p2;
    sc_signal< sc_lv<32> > tmp_2_i_reg_140;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter10;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter11;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter12;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter13;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter14;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter15;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter16;
    sc_signal< sc_lv<8> > ap_phi_mux_i_0_i_i_phi_fu_87_p4;
    sc_signal< sc_lv<64> > tmp_i_fu_121_p1;
    sc_signal< sc_lv<32> > grp_fu_95_p0;
    sc_signal< sc_logic > grp_fu_95_ce;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state19;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_437F0000;
    static const sc_lv<8> ap_const_lv8_E0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state19();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state11_pp0_stage0_iter9();
    void thread_ap_block_state12_pp0_stage0_iter10();
    void thread_ap_block_state13_pp0_stage0_iter11();
    void thread_ap_block_state14_pp0_stage0_iter12();
    void thread_ap_block_state15_pp0_stage0_iter13();
    void thread_ap_block_state16_pp0_stage0_iter14();
    void thread_ap_block_state17_pp0_stage0_iter15();
    void thread_ap_block_state18_pp0_stage0_iter16();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_i_i_phi_fu_87_p4();
    void thread_ap_ready();
    void thread_exitcond1_i_i_fu_100_p2();
    void thread_grp_fu_95_ce();
    void thread_grp_fu_95_p0();
    void thread_i_fu_106_p2();
    void thread_img_dat_address0();
    void thread_img_dat_ce0();
    void thread_img_dat_d0();
    void thread_img_dat_we0();
    void thread_in_r_TDATA_blk_n();
    void thread_in_r_TREADY();
    void thread_tmp_i_fu_121_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
