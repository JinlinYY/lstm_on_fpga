// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="LSTM_Top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.514000,HLS_SYN_LAT=16983,HLS_SYN_TPT=none,HLS_SYN_MEM=192,HLS_SYN_DSP=177,HLS_SYN_FF=33808,HLS_SYN_LUT=39138,HLS_VERSION=2018_3}" *)

module LSTM_Top (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TKEEP,
        in_r_TSTRB,
        in_r_TUSER,
        in_r_TLAST,
        in_r_TID,
        in_r_TDEST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        out_r_TID,
        out_r_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [3:0] in_r_TKEEP;
input  [3:0] in_r_TSTRB;
input  [0:0] in_r_TUSER;
input  [0:0] in_r_TLAST;
input  [0:0] in_r_TID;
input  [0:0] in_r_TDEST;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [3:0] out_r_TKEEP;
output  [3:0] out_r_TSTRB;
output  [0:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [0:0] out_r_TID;
output  [0:0] out_r_TDEST;

 reg    ap_rst_n_inv;
reg   [31:0] in_data_V_0_data_out;
wire    in_data_V_0_vld_in;
wire    in_data_V_0_vld_out;
wire    in_data_V_0_ack_in;
reg    in_data_V_0_ack_out;
reg   [31:0] in_data_V_0_payload_A;
reg   [31:0] in_data_V_0_payload_B;
reg    in_data_V_0_sel_rd;
reg    in_data_V_0_sel_wr;
wire    in_data_V_0_sel;
wire    in_data_V_0_load_A;
wire    in_data_V_0_load_B;
reg   [1:0] in_data_V_0_state;
wire    in_data_V_0_state_cmp_full;
reg   [3:0] in_keep_V_0_data_out;
wire    in_keep_V_0_vld_in;
wire    in_keep_V_0_vld_out;
wire    in_keep_V_0_ack_in;
reg    in_keep_V_0_ack_out;
reg   [3:0] in_keep_V_0_payload_A;
reg   [3:0] in_keep_V_0_payload_B;
reg    in_keep_V_0_sel_rd;
reg    in_keep_V_0_sel_wr;
wire    in_keep_V_0_sel;
wire    in_keep_V_0_load_A;
wire    in_keep_V_0_load_B;
reg   [1:0] in_keep_V_0_state;
wire    in_keep_V_0_state_cmp_full;
reg   [3:0] in_strb_V_0_data_out;
wire    in_strb_V_0_vld_in;
wire    in_strb_V_0_vld_out;
wire    in_strb_V_0_ack_in;
reg    in_strb_V_0_ack_out;
reg   [3:0] in_strb_V_0_payload_A;
reg   [3:0] in_strb_V_0_payload_B;
reg    in_strb_V_0_sel_rd;
reg    in_strb_V_0_sel_wr;
wire    in_strb_V_0_sel;
wire    in_strb_V_0_load_A;
wire    in_strb_V_0_load_B;
reg   [1:0] in_strb_V_0_state;
wire    in_strb_V_0_state_cmp_full;
reg   [0:0] in_user_V_0_data_out;
wire    in_user_V_0_vld_in;
wire    in_user_V_0_vld_out;
wire    in_user_V_0_ack_in;
reg    in_user_V_0_ack_out;
reg   [0:0] in_user_V_0_payload_A;
reg   [0:0] in_user_V_0_payload_B;
reg    in_user_V_0_sel_rd;
reg    in_user_V_0_sel_wr;
wire    in_user_V_0_sel;
wire    in_user_V_0_load_A;
wire    in_user_V_0_load_B;
reg   [1:0] in_user_V_0_state;
wire    in_user_V_0_state_cmp_full;
reg   [0:0] in_last_V_0_data_out;
wire    in_last_V_0_vld_in;
wire    in_last_V_0_vld_out;
wire    in_last_V_0_ack_in;
reg    in_last_V_0_ack_out;
reg   [0:0] in_last_V_0_payload_A;
reg   [0:0] in_last_V_0_payload_B;
reg    in_last_V_0_sel_rd;
reg    in_last_V_0_sel_wr;
wire    in_last_V_0_sel;
wire    in_last_V_0_load_A;
wire    in_last_V_0_load_B;
reg   [1:0] in_last_V_0_state;
wire    in_last_V_0_state_cmp_full;
reg   [0:0] in_id_V_0_data_out;
wire    in_id_V_0_vld_in;
wire    in_id_V_0_vld_out;
wire    in_id_V_0_ack_in;
reg    in_id_V_0_ack_out;
reg   [0:0] in_id_V_0_payload_A;
reg   [0:0] in_id_V_0_payload_B;
reg    in_id_V_0_sel_rd;
reg    in_id_V_0_sel_wr;
wire    in_id_V_0_sel;
wire    in_id_V_0_load_A;
wire    in_id_V_0_load_B;
reg   [1:0] in_id_V_0_state;
wire    in_id_V_0_state_cmp_full;
reg   [0:0] in_dest_V_0_data_out;
wire    in_dest_V_0_vld_in;
wire    in_dest_V_0_vld_out;
wire    in_dest_V_0_ack_in;
reg    in_dest_V_0_ack_out;
reg   [0:0] in_dest_V_0_payload_A;
reg   [0:0] in_dest_V_0_payload_B;
reg    in_dest_V_0_sel_rd;
reg    in_dest_V_0_sel_wr;
wire    in_dest_V_0_sel;
wire    in_dest_V_0_load_A;
wire    in_dest_V_0_load_B;
reg   [1:0] in_dest_V_0_state;
wire    in_dest_V_0_state_cmp_full;
reg   [31:0] out_data_V_1_data_out;
wire    out_data_V_1_vld_in;
wire    out_data_V_1_vld_out;
wire    out_data_V_1_ack_in;
wire    out_data_V_1_ack_out;
reg   [31:0] out_data_V_1_payload_A;
reg   [31:0] out_data_V_1_payload_B;
reg    out_data_V_1_sel_rd;
reg    out_data_V_1_sel_wr;
wire    out_data_V_1_sel;
wire    out_data_V_1_load_A;
wire    out_data_V_1_load_B;
reg   [1:0] out_data_V_1_state;
wire    out_data_V_1_state_cmp_full;
reg   [3:0] out_keep_V_1_data_out;
wire    out_keep_V_1_vld_in;
wire    out_keep_V_1_vld_out;
wire    out_keep_V_1_ack_in;
wire    out_keep_V_1_ack_out;
reg   [3:0] out_keep_V_1_payload_A;
reg   [3:0] out_keep_V_1_payload_B;
reg    out_keep_V_1_sel_rd;
reg    out_keep_V_1_sel_wr;
wire    out_keep_V_1_sel;
wire    out_keep_V_1_load_A;
wire    out_keep_V_1_load_B;
reg   [1:0] out_keep_V_1_state;
wire    out_keep_V_1_state_cmp_full;
reg   [3:0] out_strb_V_1_data_out;
wire    out_strb_V_1_vld_in;
wire    out_strb_V_1_vld_out;
wire    out_strb_V_1_ack_in;
wire    out_strb_V_1_ack_out;
reg   [3:0] out_strb_V_1_payload_A;
reg   [3:0] out_strb_V_1_payload_B;
reg    out_strb_V_1_sel_rd;
reg    out_strb_V_1_sel_wr;
wire    out_strb_V_1_sel;
wire    out_strb_V_1_load_A;
wire    out_strb_V_1_load_B;
reg   [1:0] out_strb_V_1_state;
wire    out_strb_V_1_state_cmp_full;
reg   [0:0] out_user_V_1_data_out;
wire    out_user_V_1_vld_in;
wire    out_user_V_1_vld_out;
wire    out_user_V_1_ack_in;
wire    out_user_V_1_ack_out;
reg   [0:0] out_user_V_1_payload_A;
reg   [0:0] out_user_V_1_payload_B;
reg    out_user_V_1_sel_rd;
reg    out_user_V_1_sel_wr;
wire    out_user_V_1_sel;
wire    out_user_V_1_load_A;
wire    out_user_V_1_load_B;
reg   [1:0] out_user_V_1_state;
wire    out_user_V_1_state_cmp_full;
reg   [0:0] out_last_V_1_data_out;
wire    out_last_V_1_vld_in;
wire    out_last_V_1_vld_out;
wire    out_last_V_1_ack_in;
wire    out_last_V_1_ack_out;
reg   [0:0] out_last_V_1_payload_A;
reg   [0:0] out_last_V_1_payload_B;
reg    out_last_V_1_sel_rd;
reg    out_last_V_1_sel_wr;
wire    out_last_V_1_sel;
wire    out_last_V_1_load_A;
wire    out_last_V_1_load_B;
reg   [1:0] out_last_V_1_state;
wire    out_last_V_1_state_cmp_full;
reg   [0:0] out_id_V_1_data_out;
wire    out_id_V_1_vld_in;
wire    out_id_V_1_vld_out;
wire    out_id_V_1_ack_in;
wire    out_id_V_1_ack_out;
reg   [0:0] out_id_V_1_payload_A;
reg   [0:0] out_id_V_1_payload_B;
reg    out_id_V_1_sel_rd;
reg    out_id_V_1_sel_wr;
wire    out_id_V_1_sel;
wire    out_id_V_1_load_A;
wire    out_id_V_1_load_B;
reg   [1:0] out_id_V_1_state;
wire    out_id_V_1_state_cmp_full;
reg   [0:0] out_dest_V_1_data_out;
wire    out_dest_V_1_vld_in;
wire    out_dest_V_1_vld_out;
wire    out_dest_V_1_ack_in;
wire    out_dest_V_1_ack_out;
reg   [0:0] out_dest_V_1_payload_A;
reg   [0:0] out_dest_V_1_payload_B;
reg    out_dest_V_1_sel_rd;
reg    out_dest_V_1_sel_wr;
wire    out_dest_V_1_sel;
wire    out_dest_V_1_load_A;
wire    out_dest_V_1_load_B;
reg   [1:0] out_dest_V_1_state;
wire    out_dest_V_1_state_cmp_full;
wire   [31:0] grp_mnist_lstm_fu_456_out_r_TDATA;
wire   [3:0] grp_mnist_lstm_fu_456_out_r_TKEEP;
wire   [3:0] grp_mnist_lstm_fu_456_out_r_TSTRB;
wire   [0:0] grp_mnist_lstm_fu_456_out_r_TUSER;
wire   [0:0] grp_mnist_lstm_fu_456_out_r_TLAST;
wire   [0:0] grp_mnist_lstm_fu_456_out_r_TID;
wire   [0:0] grp_mnist_lstm_fu_456_out_r_TDEST;
wire    grp_mnist_lstm_fu_456_in_r_TVALID;
wire    grp_mnist_lstm_fu_456_in_r_TREADY;
wire    grp_mnist_lstm_fu_456_ap_start;
wire    grp_mnist_lstm_fu_456_out_r_TVALID;
wire    grp_mnist_lstm_fu_456_out_r_TREADY;
wire    grp_mnist_lstm_fu_456_ap_done;
wire    grp_mnist_lstm_fu_456_ap_ready;
wire    grp_mnist_lstm_fu_456_ap_idle;
reg    grp_mnist_lstm_fu_456_ap_continue;
reg    grp_mnist_lstm_fu_456_ap_start_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_sync_grp_mnist_lstm_fu_456_ap_ready;
wire    ap_sync_grp_mnist_lstm_fu_456_ap_done;
reg    ap_block_state3_on_subcall_done;
reg    ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready;
reg    ap_sync_reg_grp_mnist_lstm_fu_456_ap_done;
reg   [3:0] ap_NS_fsm;
wire    ap_CS_fsm_state4;
reg    ap_block_state4;

// power-on initialization
initial begin
#0 in_data_V_0_sel_rd = 1'b0;
#0 in_data_V_0_sel_wr = 1'b0;
#0 in_data_V_0_state = 2'd0;
#0 in_keep_V_0_sel_rd = 1'b0;
#0 in_keep_V_0_sel_wr = 1'b0;
#0 in_keep_V_0_state = 2'd0;
#0 in_strb_V_0_sel_rd = 1'b0;
#0 in_strb_V_0_sel_wr = 1'b0;
#0 in_strb_V_0_state = 2'd0;
#0 in_user_V_0_sel_rd = 1'b0;
#0 in_user_V_0_sel_wr = 1'b0;
#0 in_user_V_0_state = 2'd0;
#0 in_last_V_0_sel_rd = 1'b0;
#0 in_last_V_0_sel_wr = 1'b0;
#0 in_last_V_0_state = 2'd0;
#0 in_id_V_0_sel_rd = 1'b0;
#0 in_id_V_0_sel_wr = 1'b0;
#0 in_id_V_0_state = 2'd0;
#0 in_dest_V_0_sel_rd = 1'b0;
#0 in_dest_V_0_sel_wr = 1'b0;
#0 in_dest_V_0_state = 2'd0;
#0 out_data_V_1_sel_rd = 1'b0;
#0 out_data_V_1_sel_wr = 1'b0;
#0 out_data_V_1_state = 2'd0;
#0 out_keep_V_1_sel_rd = 1'b0;
#0 out_keep_V_1_sel_wr = 1'b0;
#0 out_keep_V_1_state = 2'd0;
#0 out_strb_V_1_sel_rd = 1'b0;
#0 out_strb_V_1_sel_wr = 1'b0;
#0 out_strb_V_1_state = 2'd0;
#0 out_user_V_1_sel_rd = 1'b0;
#0 out_user_V_1_sel_wr = 1'b0;
#0 out_user_V_1_state = 2'd0;
#0 out_last_V_1_sel_rd = 1'b0;
#0 out_last_V_1_sel_wr = 1'b0;
#0 out_last_V_1_state = 2'd0;
#0 out_id_V_1_sel_rd = 1'b0;
#0 out_id_V_1_sel_wr = 1'b0;
#0 out_id_V_1_state = 2'd0;
#0 out_dest_V_1_sel_rd = 1'b0;
#0 out_dest_V_1_sel_wr = 1'b0;
#0 out_dest_V_1_state = 2'd0;
#0 grp_mnist_lstm_fu_456_ap_start_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready = 1'b0;
#0 ap_sync_reg_grp_mnist_lstm_fu_456_ap_done = 1'b0;
end

mnist_lstm grp_mnist_lstm_fu_456(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .in_r_TDATA(in_data_V_0_data_out),
    .in_r_TKEEP(in_keep_V_0_data_out),
    .in_r_TSTRB(in_strb_V_0_data_out),
    .in_r_TUSER(in_user_V_0_data_out),
    .in_r_TLAST(in_last_V_0_data_out),
    .in_r_TID(in_id_V_0_data_out),
    .in_r_TDEST(in_dest_V_0_data_out),
    .out_r_TDATA(grp_mnist_lstm_fu_456_out_r_TDATA),
    .out_r_TKEEP(grp_mnist_lstm_fu_456_out_r_TKEEP),
    .out_r_TSTRB(grp_mnist_lstm_fu_456_out_r_TSTRB),
    .out_r_TUSER(grp_mnist_lstm_fu_456_out_r_TUSER),
    .out_r_TLAST(grp_mnist_lstm_fu_456_out_r_TLAST),
    .out_r_TID(grp_mnist_lstm_fu_456_out_r_TID),
    .out_r_TDEST(grp_mnist_lstm_fu_456_out_r_TDEST),
    .in_r_TVALID(grp_mnist_lstm_fu_456_in_r_TVALID),
    .in_r_TREADY(grp_mnist_lstm_fu_456_in_r_TREADY),
    .ap_start(grp_mnist_lstm_fu_456_ap_start),
    .out_r_TVALID(grp_mnist_lstm_fu_456_out_r_TVALID),
    .out_r_TREADY(grp_mnist_lstm_fu_456_out_r_TREADY),
    .ap_done(grp_mnist_lstm_fu_456_ap_done),
    .ap_ready(grp_mnist_lstm_fu_456_ap_ready),
    .ap_idle(grp_mnist_lstm_fu_456_ap_idle),
    .ap_continue(grp_mnist_lstm_fu_456_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_mnist_lstm_fu_456_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_mnist_lstm_fu_456_ap_done <= 1'b0;
        end else if ((grp_mnist_lstm_fu_456_ap_done == 1'b1)) begin
            ap_sync_reg_grp_mnist_lstm_fu_456_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready <= 1'b0;
        end else if ((grp_mnist_lstm_fu_456_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mnist_lstm_fu_456_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) | ((ap_sync_grp_mnist_lstm_fu_456_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_mnist_lstm_fu_456_ap_start_reg <= 1'b1;
        end else if ((grp_mnist_lstm_fu_456_ap_ready == 1'b1)) begin
            grp_mnist_lstm_fu_456_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_V_0_ack_out == 1'b1) & (in_data_V_0_vld_out == 1'b1))) begin
            in_data_V_0_sel_rd <= ~in_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_V_0_ack_in == 1'b1) & (in_data_V_0_vld_in == 1'b1))) begin
            in_data_V_0_sel_wr <= ~in_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_V_0_vld_in == 1'b0) & (in_data_V_0_state == 2'd2)) | ((in_data_V_0_vld_in == 1'b0) & (in_data_V_0_state == 2'd3) & (in_data_V_0_ack_out == 1'b1)))) begin
            in_data_V_0_state <= 2'd2;
        end else if ((((in_data_V_0_ack_out == 1'b0) & (in_data_V_0_state == 2'd1)) | ((in_data_V_0_ack_out == 1'b0) & (in_data_V_0_state == 2'd3) & (in_data_V_0_vld_in == 1'b1)))) begin
            in_data_V_0_state <= 2'd1;
        end else if (((~((in_data_V_0_vld_in == 1'b0) & (in_data_V_0_ack_out == 1'b1)) & ~((in_data_V_0_ack_out == 1'b0) & (in_data_V_0_vld_in == 1'b1)) & (in_data_V_0_state == 2'd3)) | ((in_data_V_0_state == 2'd1) & (in_data_V_0_ack_out == 1'b1)) | ((in_data_V_0_state == 2'd2) & (in_data_V_0_vld_in == 1'b1)))) begin
            in_data_V_0_state <= 2'd3;
        end else begin
            in_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_dest_V_0_ack_out == 1'b1) & (in_dest_V_0_vld_out == 1'b1))) begin
            in_dest_V_0_sel_rd <= ~in_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_dest_V_0_ack_in == 1'b1) & (in_dest_V_0_vld_in == 1'b1))) begin
            in_dest_V_0_sel_wr <= ~in_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_dest_V_0_state == 2'd2) & (in_dest_V_0_vld_in == 1'b0)) | ((in_dest_V_0_state == 2'd3) & (in_dest_V_0_vld_in == 1'b0) & (in_dest_V_0_ack_out == 1'b1)))) begin
            in_dest_V_0_state <= 2'd2;
        end else if ((((in_dest_V_0_state == 2'd1) & (in_dest_V_0_ack_out == 1'b0)) | ((in_dest_V_0_state == 2'd3) & (in_dest_V_0_ack_out == 1'b0) & (in_dest_V_0_vld_in == 1'b1)))) begin
            in_dest_V_0_state <= 2'd1;
        end else if (((~((in_dest_V_0_vld_in == 1'b0) & (in_dest_V_0_ack_out == 1'b1)) & ~((in_dest_V_0_ack_out == 1'b0) & (in_dest_V_0_vld_in == 1'b1)) & (in_dest_V_0_state == 2'd3)) | ((in_dest_V_0_state == 2'd1) & (in_dest_V_0_ack_out == 1'b1)) | ((in_dest_V_0_state == 2'd2) & (in_dest_V_0_vld_in == 1'b1)))) begin
            in_dest_V_0_state <= 2'd3;
        end else begin
            in_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_id_V_0_ack_out == 1'b1) & (in_id_V_0_vld_out == 1'b1))) begin
            in_id_V_0_sel_rd <= ~in_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_id_V_0_ack_in == 1'b1) & (in_id_V_0_vld_in == 1'b1))) begin
            in_id_V_0_sel_wr <= ~in_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_id_V_0_state <= 2'd0;
    end else begin
        if ((((in_id_V_0_state == 2'd2) & (in_id_V_0_vld_in == 1'b0)) | ((in_id_V_0_state == 2'd3) & (in_id_V_0_vld_in == 1'b0) & (in_id_V_0_ack_out == 1'b1)))) begin
            in_id_V_0_state <= 2'd2;
        end else if ((((in_id_V_0_state == 2'd1) & (in_id_V_0_ack_out == 1'b0)) | ((in_id_V_0_state == 2'd3) & (in_id_V_0_ack_out == 1'b0) & (in_id_V_0_vld_in == 1'b1)))) begin
            in_id_V_0_state <= 2'd1;
        end else if (((~((in_id_V_0_vld_in == 1'b0) & (in_id_V_0_ack_out == 1'b1)) & ~((in_id_V_0_ack_out == 1'b0) & (in_id_V_0_vld_in == 1'b1)) & (in_id_V_0_state == 2'd3)) | ((in_id_V_0_state == 2'd1) & (in_id_V_0_ack_out == 1'b1)) | ((in_id_V_0_state == 2'd2) & (in_id_V_0_vld_in == 1'b1)))) begin
            in_id_V_0_state <= 2'd3;
        end else begin
            in_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_keep_V_0_ack_out == 1'b1) & (in_keep_V_0_vld_out == 1'b1))) begin
            in_keep_V_0_sel_rd <= ~in_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_keep_V_0_ack_in == 1'b1) & (in_keep_V_0_vld_in == 1'b1))) begin
            in_keep_V_0_sel_wr <= ~in_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_keep_V_0_state <= 2'd0;
    end else begin
        if ((((in_keep_V_0_state == 2'd2) & (in_keep_V_0_vld_in == 1'b0)) | ((in_keep_V_0_state == 2'd3) & (in_keep_V_0_vld_in == 1'b0) & (in_keep_V_0_ack_out == 1'b1)))) begin
            in_keep_V_0_state <= 2'd2;
        end else if ((((in_keep_V_0_state == 2'd3) & (in_keep_V_0_ack_out == 1'b0) & (in_keep_V_0_vld_in == 1'b1)) | ((in_keep_V_0_state == 2'd1) & (in_keep_V_0_ack_out == 1'b0)))) begin
            in_keep_V_0_state <= 2'd1;
        end else if ((((in_keep_V_0_state == 2'd2) & (in_keep_V_0_vld_in == 1'b1)) | (~((in_keep_V_0_vld_in == 1'b0) & (in_keep_V_0_ack_out == 1'b1)) & ~((in_keep_V_0_ack_out == 1'b0) & (in_keep_V_0_vld_in == 1'b1)) & (in_keep_V_0_state == 2'd3)) | ((in_keep_V_0_state == 2'd1) & (in_keep_V_0_ack_out == 1'b1)))) begin
            in_keep_V_0_state <= 2'd3;
        end else begin
            in_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_last_V_0_ack_out == 1'b1) & (in_last_V_0_vld_out == 1'b1))) begin
            in_last_V_0_sel_rd <= ~in_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_last_V_0_ack_in == 1'b1) & (in_last_V_0_vld_in == 1'b1))) begin
            in_last_V_0_sel_wr <= ~in_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_last_V_0_state == 2'd2) & (in_last_V_0_vld_in == 1'b0)) | ((in_last_V_0_state == 2'd3) & (in_last_V_0_vld_in == 1'b0) & (in_last_V_0_ack_out == 1'b1)))) begin
            in_last_V_0_state <= 2'd2;
        end else if ((((in_last_V_0_state == 2'd1) & (in_last_V_0_ack_out == 1'b0)) | ((in_last_V_0_state == 2'd3) & (in_last_V_0_ack_out == 1'b0) & (in_last_V_0_vld_in == 1'b1)))) begin
            in_last_V_0_state <= 2'd1;
        end else if (((~((in_last_V_0_vld_in == 1'b0) & (in_last_V_0_ack_out == 1'b1)) & ~((in_last_V_0_ack_out == 1'b0) & (in_last_V_0_vld_in == 1'b1)) & (in_last_V_0_state == 2'd3)) | ((in_last_V_0_state == 2'd1) & (in_last_V_0_ack_out == 1'b1)) | ((in_last_V_0_state == 2'd2) & (in_last_V_0_vld_in == 1'b1)))) begin
            in_last_V_0_state <= 2'd3;
        end else begin
            in_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_strb_V_0_ack_out == 1'b1) & (in_strb_V_0_vld_out == 1'b1))) begin
            in_strb_V_0_sel_rd <= ~in_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_strb_V_0_ack_in == 1'b1) & (in_strb_V_0_vld_in == 1'b1))) begin
            in_strb_V_0_sel_wr <= ~in_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_strb_V_0_state <= 2'd0;
    end else begin
        if ((((in_strb_V_0_state == 2'd2) & (in_strb_V_0_vld_in == 1'b0)) | ((in_strb_V_0_state == 2'd3) & (in_strb_V_0_vld_in == 1'b0) & (in_strb_V_0_ack_out == 1'b1)))) begin
            in_strb_V_0_state <= 2'd2;
        end else if ((((in_strb_V_0_state == 2'd1) & (in_strb_V_0_ack_out == 1'b0)) | ((in_strb_V_0_state == 2'd3) & (in_strb_V_0_ack_out == 1'b0) & (in_strb_V_0_vld_in == 1'b1)))) begin
            in_strb_V_0_state <= 2'd1;
        end else if (((~((in_strb_V_0_vld_in == 1'b0) & (in_strb_V_0_ack_out == 1'b1)) & ~((in_strb_V_0_ack_out == 1'b0) & (in_strb_V_0_vld_in == 1'b1)) & (in_strb_V_0_state == 2'd3)) | ((in_strb_V_0_state == 2'd1) & (in_strb_V_0_ack_out == 1'b1)) | ((in_strb_V_0_state == 2'd2) & (in_strb_V_0_vld_in == 1'b1)))) begin
            in_strb_V_0_state <= 2'd3;
        end else begin
            in_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_user_V_0_ack_out == 1'b1) & (in_user_V_0_vld_out == 1'b1))) begin
            in_user_V_0_sel_rd <= ~in_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_user_V_0_ack_in == 1'b1) & (in_user_V_0_vld_in == 1'b1))) begin
            in_user_V_0_sel_wr <= ~in_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_user_V_0_state <= 2'd0;
    end else begin
        if ((((in_user_V_0_state == 2'd2) & (in_user_V_0_vld_in == 1'b0)) | ((in_user_V_0_state == 2'd3) & (in_user_V_0_vld_in == 1'b0) & (in_user_V_0_ack_out == 1'b1)))) begin
            in_user_V_0_state <= 2'd2;
        end else if ((((in_user_V_0_state == 2'd1) & (in_user_V_0_ack_out == 1'b0)) | ((in_user_V_0_state == 2'd3) & (in_user_V_0_ack_out == 1'b0) & (in_user_V_0_vld_in == 1'b1)))) begin
            in_user_V_0_state <= 2'd1;
        end else if (((~((in_user_V_0_vld_in == 1'b0) & (in_user_V_0_ack_out == 1'b1)) & ~((in_user_V_0_ack_out == 1'b0) & (in_user_V_0_vld_in == 1'b1)) & (in_user_V_0_state == 2'd3)) | ((in_user_V_0_state == 2'd1) & (in_user_V_0_ack_out == 1'b1)) | ((in_user_V_0_state == 2'd2) & (in_user_V_0_vld_in == 1'b1)))) begin
            in_user_V_0_state <= 2'd3;
        end else begin
            in_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_V_1_ack_out == 1'b1) & (out_data_V_1_vld_out == 1'b1))) begin
            out_data_V_1_sel_rd <= ~out_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_V_1_ack_in == 1'b1) & (out_data_V_1_vld_in == 1'b1))) begin
            out_data_V_1_sel_wr <= ~out_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_V_1_state == 2'd2) & (out_data_V_1_vld_in == 1'b0)) | ((out_data_V_1_state == 2'd3) & (out_data_V_1_vld_in == 1'b0) & (out_data_V_1_ack_out == 1'b1)))) begin
            out_data_V_1_state <= 2'd2;
        end else if ((((out_data_V_1_state == 2'd1) & (out_data_V_1_ack_out == 1'b0)) | ((out_data_V_1_state == 2'd3) & (out_data_V_1_ack_out == 1'b0) & (out_data_V_1_vld_in == 1'b1)))) begin
            out_data_V_1_state <= 2'd1;
        end else if (((~((out_data_V_1_vld_in == 1'b0) & (out_data_V_1_ack_out == 1'b1)) & ~((out_data_V_1_ack_out == 1'b0) & (out_data_V_1_vld_in == 1'b1)) & (out_data_V_1_state == 2'd3)) | ((out_data_V_1_state == 2'd1) & (out_data_V_1_ack_out == 1'b1)) | ((out_data_V_1_state == 2'd2) & (out_data_V_1_vld_in == 1'b1)))) begin
            out_data_V_1_state <= 2'd3;
        end else begin
            out_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_dest_V_1_ack_out == 1'b1) & (out_dest_V_1_vld_out == 1'b1))) begin
            out_dest_V_1_sel_rd <= ~out_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_dest_V_1_ack_in == 1'b1) & (out_dest_V_1_vld_in == 1'b1))) begin
            out_dest_V_1_sel_wr <= ~out_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_dest_V_1_state == 2'd2) & (out_dest_V_1_vld_in == 1'b0)) | ((out_dest_V_1_state == 2'd3) & (out_dest_V_1_vld_in == 1'b0) & (out_dest_V_1_ack_out == 1'b1)))) begin
            out_dest_V_1_state <= 2'd2;
        end else if ((((out_dest_V_1_state == 2'd1) & (out_dest_V_1_ack_out == 1'b0)) | ((out_dest_V_1_state == 2'd3) & (out_dest_V_1_ack_out == 1'b0) & (out_dest_V_1_vld_in == 1'b1)))) begin
            out_dest_V_1_state <= 2'd1;
        end else if (((~((out_dest_V_1_vld_in == 1'b0) & (out_dest_V_1_ack_out == 1'b1)) & ~((out_dest_V_1_ack_out == 1'b0) & (out_dest_V_1_vld_in == 1'b1)) & (out_dest_V_1_state == 2'd3)) | ((out_dest_V_1_state == 2'd1) & (out_dest_V_1_ack_out == 1'b1)) | ((out_dest_V_1_state == 2'd2) & (out_dest_V_1_vld_in == 1'b1)))) begin
            out_dest_V_1_state <= 2'd3;
        end else begin
            out_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_id_V_1_ack_out == 1'b1) & (out_id_V_1_vld_out == 1'b1))) begin
            out_id_V_1_sel_rd <= ~out_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_id_V_1_ack_in == 1'b1) & (out_id_V_1_vld_in == 1'b1))) begin
            out_id_V_1_sel_wr <= ~out_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_id_V_1_state == 2'd2) & (out_id_V_1_vld_in == 1'b0)) | ((out_id_V_1_state == 2'd3) & (out_id_V_1_vld_in == 1'b0) & (out_id_V_1_ack_out == 1'b1)))) begin
            out_id_V_1_state <= 2'd2;
        end else if ((((out_id_V_1_state == 2'd1) & (out_id_V_1_ack_out == 1'b0)) | ((out_id_V_1_state == 2'd3) & (out_id_V_1_ack_out == 1'b0) & (out_id_V_1_vld_in == 1'b1)))) begin
            out_id_V_1_state <= 2'd1;
        end else if (((~((out_id_V_1_vld_in == 1'b0) & (out_id_V_1_ack_out == 1'b1)) & ~((out_id_V_1_ack_out == 1'b0) & (out_id_V_1_vld_in == 1'b1)) & (out_id_V_1_state == 2'd3)) | ((out_id_V_1_state == 2'd1) & (out_id_V_1_ack_out == 1'b1)) | ((out_id_V_1_state == 2'd2) & (out_id_V_1_vld_in == 1'b1)))) begin
            out_id_V_1_state <= 2'd3;
        end else begin
            out_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_keep_V_1_ack_out == 1'b1) & (out_keep_V_1_vld_out == 1'b1))) begin
            out_keep_V_1_sel_rd <= ~out_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_keep_V_1_ack_in == 1'b1) & (out_keep_V_1_vld_in == 1'b1))) begin
            out_keep_V_1_sel_wr <= ~out_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_keep_V_1_state == 2'd2) & (out_keep_V_1_vld_in == 1'b0)) | ((out_keep_V_1_state == 2'd3) & (out_keep_V_1_vld_in == 1'b0) & (out_keep_V_1_ack_out == 1'b1)))) begin
            out_keep_V_1_state <= 2'd2;
        end else if ((((out_keep_V_1_state == 2'd1) & (out_keep_V_1_ack_out == 1'b0)) | ((out_keep_V_1_state == 2'd3) & (out_keep_V_1_ack_out == 1'b0) & (out_keep_V_1_vld_in == 1'b1)))) begin
            out_keep_V_1_state <= 2'd1;
        end else if (((~((out_keep_V_1_vld_in == 1'b0) & (out_keep_V_1_ack_out == 1'b1)) & ~((out_keep_V_1_ack_out == 1'b0) & (out_keep_V_1_vld_in == 1'b1)) & (out_keep_V_1_state == 2'd3)) | ((out_keep_V_1_state == 2'd1) & (out_keep_V_1_ack_out == 1'b1)) | ((out_keep_V_1_state == 2'd2) & (out_keep_V_1_vld_in == 1'b1)))) begin
            out_keep_V_1_state <= 2'd3;
        end else begin
            out_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_out == 1'b1) & (out_last_V_1_vld_out == 1'b1))) begin
            out_last_V_1_sel_rd <= ~out_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_in == 1'b1) & (out_last_V_1_vld_in == 1'b1))) begin
            out_last_V_1_sel_wr <= ~out_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)))) begin
            out_last_V_1_state <= 2'd2;
        end else if ((((out_last_V_1_state == 2'd1) & (out_last_V_1_ack_out == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_last_V_1_ack_out == 1'b0) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd1;
        end else if (((~((out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)) & ~((out_last_V_1_ack_out == 1'b0) & (out_last_V_1_vld_in == 1'b1)) & (out_last_V_1_state == 2'd3)) | ((out_last_V_1_state == 2'd1) & (out_last_V_1_ack_out == 1'b1)) | ((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd3;
        end else begin
            out_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_strb_V_1_ack_out == 1'b1) & (out_strb_V_1_vld_out == 1'b1))) begin
            out_strb_V_1_sel_rd <= ~out_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_strb_V_1_ack_in == 1'b1) & (out_strb_V_1_vld_in == 1'b1))) begin
            out_strb_V_1_sel_wr <= ~out_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_strb_V_1_state == 2'd2) & (out_strb_V_1_vld_in == 1'b0)) | ((out_strb_V_1_state == 2'd3) & (out_strb_V_1_vld_in == 1'b0) & (out_strb_V_1_ack_out == 1'b1)))) begin
            out_strb_V_1_state <= 2'd2;
        end else if ((((out_strb_V_1_state == 2'd1) & (out_strb_V_1_ack_out == 1'b0)) | ((out_strb_V_1_state == 2'd3) & (out_strb_V_1_ack_out == 1'b0) & (out_strb_V_1_vld_in == 1'b1)))) begin
            out_strb_V_1_state <= 2'd1;
        end else if (((~((out_strb_V_1_vld_in == 1'b0) & (out_strb_V_1_ack_out == 1'b1)) & ~((out_strb_V_1_ack_out == 1'b0) & (out_strb_V_1_vld_in == 1'b1)) & (out_strb_V_1_state == 2'd3)) | ((out_strb_V_1_state == 2'd1) & (out_strb_V_1_ack_out == 1'b1)) | ((out_strb_V_1_state == 2'd2) & (out_strb_V_1_vld_in == 1'b1)))) begin
            out_strb_V_1_state <= 2'd3;
        end else begin
            out_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_user_V_1_ack_out == 1'b1) & (out_user_V_1_vld_out == 1'b1))) begin
            out_user_V_1_sel_rd <= ~out_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_user_V_1_ack_in == 1'b1) & (out_user_V_1_vld_in == 1'b1))) begin
            out_user_V_1_sel_wr <= ~out_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_user_V_1_state == 2'd2) & (out_user_V_1_vld_in == 1'b0)) | ((out_user_V_1_state == 2'd3) & (out_user_V_1_vld_in == 1'b0) & (out_user_V_1_ack_out == 1'b1)))) begin
            out_user_V_1_state <= 2'd2;
        end else if ((((out_user_V_1_state == 2'd1) & (out_user_V_1_ack_out == 1'b0)) | ((out_user_V_1_state == 2'd3) & (out_user_V_1_ack_out == 1'b0) & (out_user_V_1_vld_in == 1'b1)))) begin
            out_user_V_1_state <= 2'd1;
        end else if (((~((out_user_V_1_vld_in == 1'b0) & (out_user_V_1_ack_out == 1'b1)) & ~((out_user_V_1_ack_out == 1'b0) & (out_user_V_1_vld_in == 1'b1)) & (out_user_V_1_state == 2'd3)) | ((out_user_V_1_state == 2'd1) & (out_user_V_1_ack_out == 1'b1)) | ((out_user_V_1_state == 2'd2) & (out_user_V_1_vld_in == 1'b1)))) begin
            out_user_V_1_state <= 2'd3;
        end else begin
            out_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_V_0_load_A == 1'b1)) begin
        in_data_V_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_V_0_load_B == 1'b1)) begin
        in_data_V_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_dest_V_0_load_A == 1'b1)) begin
        in_dest_V_0_payload_A <= in_r_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_dest_V_0_load_B == 1'b1)) begin
        in_dest_V_0_payload_B <= in_r_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_id_V_0_load_A == 1'b1)) begin
        in_id_V_0_payload_A <= in_r_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_id_V_0_load_B == 1'b1)) begin
        in_id_V_0_payload_B <= in_r_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_keep_V_0_load_A == 1'b1)) begin
        in_keep_V_0_payload_A <= in_r_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((in_keep_V_0_load_B == 1'b1)) begin
        in_keep_V_0_payload_B <= in_r_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((in_last_V_0_load_A == 1'b1)) begin
        in_last_V_0_payload_A <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_last_V_0_load_B == 1'b1)) begin
        in_last_V_0_payload_B <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_strb_V_0_load_A == 1'b1)) begin
        in_strb_V_0_payload_A <= in_r_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((in_strb_V_0_load_B == 1'b1)) begin
        in_strb_V_0_payload_B <= in_r_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((in_user_V_0_load_A == 1'b1)) begin
        in_user_V_0_payload_A <= in_r_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((in_user_V_0_load_B == 1'b1)) begin
        in_user_V_0_payload_B <= in_r_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_V_1_load_A == 1'b1)) begin
        out_data_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_V_1_load_B == 1'b1)) begin
        out_data_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_dest_V_1_load_A == 1'b1)) begin
        out_dest_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_dest_V_1_load_B == 1'b1)) begin
        out_dest_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_id_V_1_load_A == 1'b1)) begin
        out_id_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((out_id_V_1_load_B == 1'b1)) begin
        out_id_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((out_keep_V_1_load_A == 1'b1)) begin
        out_keep_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((out_keep_V_1_load_B == 1'b1)) begin
        out_keep_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_A == 1'b1)) begin
        out_last_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_B == 1'b1)) begin
        out_last_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_strb_V_1_load_A == 1'b1)) begin
        out_strb_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((out_strb_V_1_load_B == 1'b1)) begin
        out_strb_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((out_user_V_1_load_A == 1'b1)) begin
        out_user_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((out_user_V_1_load_B == 1'b1)) begin
        out_user_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TUSER;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_mnist_lstm_fu_456_ap_continue = 1'b1;
    end else begin
        grp_mnist_lstm_fu_456_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_data_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY;
    end else begin
        in_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_V_0_sel == 1'b1)) begin
        in_data_V_0_data_out = in_data_V_0_payload_B;
    end else begin
        in_data_V_0_data_out = in_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_dest_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY;
    end else begin
        in_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_dest_V_0_sel == 1'b1)) begin
        in_dest_V_0_data_out = in_dest_V_0_payload_B;
    end else begin
        in_dest_V_0_data_out = in_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_id_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY;
    end else begin
        in_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_id_V_0_sel == 1'b1)) begin
        in_id_V_0_data_out = in_id_V_0_payload_B;
    end else begin
        in_id_V_0_data_out = in_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_keep_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY;
    end else begin
        in_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_keep_V_0_sel == 1'b1)) begin
        in_keep_V_0_data_out = in_keep_V_0_payload_B;
    end else begin
        in_keep_V_0_data_out = in_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_last_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY;
    end else begin
        in_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_last_V_0_sel == 1'b1)) begin
        in_last_V_0_data_out = in_last_V_0_payload_B;
    end else begin
        in_last_V_0_data_out = in_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_strb_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY;
    end else begin
        in_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_strb_V_0_sel == 1'b1)) begin
        in_strb_V_0_data_out = in_strb_V_0_payload_B;
    end else begin
        in_strb_V_0_data_out = in_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_user_V_0_ack_out = grp_mnist_lstm_fu_456_in_r_TREADY;
    end else begin
        in_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_user_V_0_sel == 1'b1)) begin
        in_user_V_0_data_out = in_user_V_0_payload_B;
    end else begin
        in_user_V_0_data_out = in_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((out_data_V_1_sel == 1'b1)) begin
        out_data_V_1_data_out = out_data_V_1_payload_B;
    end else begin
        out_data_V_1_data_out = out_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_dest_V_1_sel == 1'b1)) begin
        out_dest_V_1_data_out = out_dest_V_1_payload_B;
    end else begin
        out_dest_V_1_data_out = out_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_id_V_1_sel == 1'b1)) begin
        out_id_V_1_data_out = out_id_V_1_payload_B;
    end else begin
        out_id_V_1_data_out = out_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_keep_V_1_sel == 1'b1)) begin
        out_keep_V_1_data_out = out_keep_V_1_payload_B;
    end else begin
        out_keep_V_1_data_out = out_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_last_V_1_sel == 1'b1)) begin
        out_last_V_1_data_out = out_last_V_1_payload_B;
    end else begin
        out_last_V_1_data_out = out_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_strb_V_1_sel == 1'b1)) begin
        out_strb_V_1_data_out = out_strb_V_1_payload_B;
    end else begin
        out_strb_V_1_data_out = out_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_user_V_1_sel == 1'b1)) begin
        out_user_V_1_data_out = out_user_V_1_payload_B;
    end else begin
        out_user_V_1_data_out = out_user_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out_dest_V_1_ack_in == 1'b0) | (out_id_V_1_ack_in == 1'b0) | (out_last_V_1_ack_in == 1'b0) | (out_user_V_1_ack_in == 1'b0) | (out_strb_V_1_ack_in == 1'b0) | (out_keep_V_1_ack_in == 1'b0) | (out_data_V_1_ack_in == 1'b0)) & (out_dest_V_1_state[1'd0] == 1'b0) & (out_id_V_1_state[1'd0] == 1'b0) & (out_last_V_1_state[1'd0] == 1'b0) & (out_user_V_1_state[1'd0] == 1'b0) & (out_strb_V_1_state[1'd0] == 1'b0) & (out_keep_V_1_state[1'd0] == 1'b0) & (out_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_grp_mnist_lstm_fu_456_ap_ready & ap_sync_grp_mnist_lstm_fu_456_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state4 = ((out_dest_V_1_ack_in == 1'b0) | (out_id_V_1_ack_in == 1'b0) | (out_last_V_1_ack_in == 1'b0) | (out_user_V_1_ack_in == 1'b0) | (out_strb_V_1_ack_in == 1'b0) | (out_keep_V_1_ack_in == 1'b0) | (out_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_mnist_lstm_fu_456_ap_done = (grp_mnist_lstm_fu_456_ap_done | ap_sync_reg_grp_mnist_lstm_fu_456_ap_done);

assign ap_sync_grp_mnist_lstm_fu_456_ap_ready = (grp_mnist_lstm_fu_456_ap_ready | ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready);

assign grp_mnist_lstm_fu_456_ap_start = grp_mnist_lstm_fu_456_ap_start_reg;

assign grp_mnist_lstm_fu_456_in_r_TVALID = in_dest_V_0_state[1'd0];

assign grp_mnist_lstm_fu_456_out_r_TREADY = ((out_dest_V_1_ack_in & ap_CS_fsm_state3) | (out_id_V_1_ack_in & ap_CS_fsm_state3) | (out_last_V_1_ack_in & ap_CS_fsm_state3) | (out_user_V_1_ack_in & ap_CS_fsm_state3) | (out_strb_V_1_ack_in & ap_CS_fsm_state3) | (out_keep_V_1_ack_in & ap_CS_fsm_state3) | (out_data_V_1_ack_in & ap_CS_fsm_state3));

assign in_data_V_0_ack_in = in_data_V_0_state[1'd1];

assign in_data_V_0_load_A = (in_data_V_0_state_cmp_full & ~in_data_V_0_sel_wr);

assign in_data_V_0_load_B = (in_data_V_0_state_cmp_full & in_data_V_0_sel_wr);

assign in_data_V_0_sel = in_data_V_0_sel_rd;

assign in_data_V_0_state_cmp_full = ((in_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_V_0_vld_in = in_r_TVALID;

assign in_data_V_0_vld_out = in_data_V_0_state[1'd0];

assign in_dest_V_0_ack_in = in_dest_V_0_state[1'd1];

assign in_dest_V_0_load_A = (in_dest_V_0_state_cmp_full & ~in_dest_V_0_sel_wr);

assign in_dest_V_0_load_B = (in_dest_V_0_state_cmp_full & in_dest_V_0_sel_wr);

assign in_dest_V_0_sel = in_dest_V_0_sel_rd;

assign in_dest_V_0_state_cmp_full = ((in_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_dest_V_0_vld_in = in_r_TVALID;

assign in_dest_V_0_vld_out = in_dest_V_0_state[1'd0];

assign in_id_V_0_ack_in = in_id_V_0_state[1'd1];

assign in_id_V_0_load_A = (in_id_V_0_state_cmp_full & ~in_id_V_0_sel_wr);

assign in_id_V_0_load_B = (in_id_V_0_state_cmp_full & in_id_V_0_sel_wr);

assign in_id_V_0_sel = in_id_V_0_sel_rd;

assign in_id_V_0_state_cmp_full = ((in_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_id_V_0_vld_in = in_r_TVALID;

assign in_id_V_0_vld_out = in_id_V_0_state[1'd0];

assign in_keep_V_0_ack_in = in_keep_V_0_state[1'd1];

assign in_keep_V_0_load_A = (in_keep_V_0_state_cmp_full & ~in_keep_V_0_sel_wr);

assign in_keep_V_0_load_B = (in_keep_V_0_state_cmp_full & in_keep_V_0_sel_wr);

assign in_keep_V_0_sel = in_keep_V_0_sel_rd;

assign in_keep_V_0_state_cmp_full = ((in_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_keep_V_0_vld_in = in_r_TVALID;

assign in_keep_V_0_vld_out = in_keep_V_0_state[1'd0];

assign in_last_V_0_ack_in = in_last_V_0_state[1'd1];

assign in_last_V_0_load_A = (in_last_V_0_state_cmp_full & ~in_last_V_0_sel_wr);

assign in_last_V_0_load_B = (in_last_V_0_state_cmp_full & in_last_V_0_sel_wr);

assign in_last_V_0_sel = in_last_V_0_sel_rd;

assign in_last_V_0_state_cmp_full = ((in_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_last_V_0_vld_in = in_r_TVALID;

assign in_last_V_0_vld_out = in_last_V_0_state[1'd0];

assign in_r_TREADY = in_dest_V_0_state[1'd1];

assign in_strb_V_0_ack_in = in_strb_V_0_state[1'd1];

assign in_strb_V_0_load_A = (in_strb_V_0_state_cmp_full & ~in_strb_V_0_sel_wr);

assign in_strb_V_0_load_B = (in_strb_V_0_state_cmp_full & in_strb_V_0_sel_wr);

assign in_strb_V_0_sel = in_strb_V_0_sel_rd;

assign in_strb_V_0_state_cmp_full = ((in_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_strb_V_0_vld_in = in_r_TVALID;

assign in_strb_V_0_vld_out = in_strb_V_0_state[1'd0];

assign in_user_V_0_ack_in = in_user_V_0_state[1'd1];

assign in_user_V_0_load_A = (in_user_V_0_state_cmp_full & ~in_user_V_0_sel_wr);

assign in_user_V_0_load_B = (in_user_V_0_state_cmp_full & in_user_V_0_sel_wr);

assign in_user_V_0_sel = in_user_V_0_sel_rd;

assign in_user_V_0_state_cmp_full = ((in_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_user_V_0_vld_in = in_r_TVALID;

assign in_user_V_0_vld_out = in_user_V_0_state[1'd0];

assign out_data_V_1_ack_in = out_data_V_1_state[1'd1];

assign out_data_V_1_ack_out = out_r_TREADY;

assign out_data_V_1_load_A = (out_data_V_1_state_cmp_full & ~out_data_V_1_sel_wr);

assign out_data_V_1_load_B = (out_data_V_1_state_cmp_full & out_data_V_1_sel_wr);

assign out_data_V_1_sel = out_data_V_1_sel_rd;

assign out_data_V_1_state_cmp_full = ((out_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID;

assign out_data_V_1_vld_out = out_data_V_1_state[1'd0];

assign out_dest_V_1_ack_in = out_dest_V_1_state[1'd1];

assign out_dest_V_1_ack_out = out_r_TREADY;

assign out_dest_V_1_load_A = (out_dest_V_1_state_cmp_full & ~out_dest_V_1_sel_wr);

assign out_dest_V_1_load_B = (out_dest_V_1_state_cmp_full & out_dest_V_1_sel_wr);

assign out_dest_V_1_sel = out_dest_V_1_sel_rd;

assign out_dest_V_1_state_cmp_full = ((out_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_dest_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID;

assign out_dest_V_1_vld_out = out_dest_V_1_state[1'd0];

assign out_id_V_1_ack_in = out_id_V_1_state[1'd1];

assign out_id_V_1_ack_out = out_r_TREADY;

assign out_id_V_1_load_A = (out_id_V_1_state_cmp_full & ~out_id_V_1_sel_wr);

assign out_id_V_1_load_B = (out_id_V_1_state_cmp_full & out_id_V_1_sel_wr);

assign out_id_V_1_sel = out_id_V_1_sel_rd;

assign out_id_V_1_state_cmp_full = ((out_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_id_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID;

assign out_id_V_1_vld_out = out_id_V_1_state[1'd0];

assign out_keep_V_1_ack_in = out_keep_V_1_state[1'd1];

assign out_keep_V_1_ack_out = out_r_TREADY;

assign out_keep_V_1_load_A = (out_keep_V_1_state_cmp_full & ~out_keep_V_1_sel_wr);

assign out_keep_V_1_load_B = (out_keep_V_1_state_cmp_full & out_keep_V_1_sel_wr);

assign out_keep_V_1_sel = out_keep_V_1_sel_rd;

assign out_keep_V_1_state_cmp_full = ((out_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_keep_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID;

assign out_keep_V_1_vld_out = out_keep_V_1_state[1'd0];

assign out_last_V_1_ack_in = out_last_V_1_state[1'd1];

assign out_last_V_1_ack_out = out_r_TREADY;

assign out_last_V_1_load_A = (out_last_V_1_state_cmp_full & ~out_last_V_1_sel_wr);

assign out_last_V_1_load_B = (out_last_V_1_state_cmp_full & out_last_V_1_sel_wr);

assign out_last_V_1_sel = out_last_V_1_sel_rd;

assign out_last_V_1_state_cmp_full = ((out_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_last_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID;

assign out_last_V_1_vld_out = out_last_V_1_state[1'd0];

assign out_r_TDATA = out_data_V_1_data_out;

assign out_r_TDEST = out_dest_V_1_data_out;

assign out_r_TID = out_id_V_1_data_out;

assign out_r_TKEEP = out_keep_V_1_data_out;

assign out_r_TLAST = out_last_V_1_data_out;

assign out_r_TSTRB = out_strb_V_1_data_out;

assign out_r_TUSER = out_user_V_1_data_out;

assign out_r_TVALID = out_dest_V_1_state[1'd0];

assign out_strb_V_1_ack_in = out_strb_V_1_state[1'd1];

assign out_strb_V_1_ack_out = out_r_TREADY;

assign out_strb_V_1_load_A = (out_strb_V_1_state_cmp_full & ~out_strb_V_1_sel_wr);

assign out_strb_V_1_load_B = (out_strb_V_1_state_cmp_full & out_strb_V_1_sel_wr);

assign out_strb_V_1_sel = out_strb_V_1_sel_rd;

assign out_strb_V_1_state_cmp_full = ((out_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_strb_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID;

assign out_strb_V_1_vld_out = out_strb_V_1_state[1'd0];

assign out_user_V_1_ack_in = out_user_V_1_state[1'd1];

assign out_user_V_1_ack_out = out_r_TREADY;

assign out_user_V_1_load_A = (out_user_V_1_state_cmp_full & ~out_user_V_1_sel_wr);

assign out_user_V_1_load_B = (out_user_V_1_state_cmp_full & out_user_V_1_sel_wr);

assign out_user_V_1_sel = out_user_V_1_sel_rd;

assign out_user_V_1_state_cmp_full = ((out_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_user_V_1_vld_in = grp_mnist_lstm_fu_456_out_r_TVALID;

assign out_user_V_1_vld_out = out_user_V_1_state[1'd0];

endmodule //LSTM_Top
