-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LSTM_Top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of LSTM_Top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "LSTM_Top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.514000,HLS_SYN_LAT=16983,HLS_SYN_TPT=none,HLS_SYN_MEM=192,HLS_SYN_DSP=177,HLS_SYN_FF=33808,HLS_SYN_LUT=39138,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_V_0_vld_in : STD_LOGIC;
    signal in_data_V_0_vld_out : STD_LOGIC;
    signal in_data_V_0_ack_in : STD_LOGIC;
    signal in_data_V_0_ack_out : STD_LOGIC;
    signal in_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_data_V_0_sel : STD_LOGIC;
    signal in_data_V_0_load_A : STD_LOGIC;
    signal in_data_V_0_load_B : STD_LOGIC;
    signal in_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal in_keep_V_0_vld_in : STD_LOGIC;
    signal in_keep_V_0_vld_out : STD_LOGIC;
    signal in_keep_V_0_ack_in : STD_LOGIC;
    signal in_keep_V_0_ack_out : STD_LOGIC;
    signal in_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal in_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal in_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal in_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal in_keep_V_0_sel : STD_LOGIC;
    signal in_keep_V_0_load_A : STD_LOGIC;
    signal in_keep_V_0_load_B : STD_LOGIC;
    signal in_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_keep_V_0_state_cmp_full : STD_LOGIC;
    signal in_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal in_strb_V_0_vld_in : STD_LOGIC;
    signal in_strb_V_0_vld_out : STD_LOGIC;
    signal in_strb_V_0_ack_in : STD_LOGIC;
    signal in_strb_V_0_ack_out : STD_LOGIC;
    signal in_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal in_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal in_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal in_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal in_strb_V_0_sel : STD_LOGIC;
    signal in_strb_V_0_load_A : STD_LOGIC;
    signal in_strb_V_0_load_B : STD_LOGIC;
    signal in_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_strb_V_0_state_cmp_full : STD_LOGIC;
    signal in_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_user_V_0_vld_in : STD_LOGIC;
    signal in_user_V_0_vld_out : STD_LOGIC;
    signal in_user_V_0_ack_in : STD_LOGIC;
    signal in_user_V_0_ack_out : STD_LOGIC;
    signal in_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_user_V_0_sel_rd : STD_LOGIC := '0';
    signal in_user_V_0_sel_wr : STD_LOGIC := '0';
    signal in_user_V_0_sel : STD_LOGIC;
    signal in_user_V_0_load_A : STD_LOGIC;
    signal in_user_V_0_load_B : STD_LOGIC;
    signal in_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_user_V_0_state_cmp_full : STD_LOGIC;
    signal in_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_vld_in : STD_LOGIC;
    signal in_last_V_0_vld_out : STD_LOGIC;
    signal in_last_V_0_ack_in : STD_LOGIC;
    signal in_last_V_0_ack_out : STD_LOGIC;
    signal in_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_sel_rd : STD_LOGIC := '0';
    signal in_last_V_0_sel_wr : STD_LOGIC := '0';
    signal in_last_V_0_sel : STD_LOGIC;
    signal in_last_V_0_load_A : STD_LOGIC;
    signal in_last_V_0_load_B : STD_LOGIC;
    signal in_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_last_V_0_state_cmp_full : STD_LOGIC;
    signal in_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_id_V_0_vld_in : STD_LOGIC;
    signal in_id_V_0_vld_out : STD_LOGIC;
    signal in_id_V_0_ack_in : STD_LOGIC;
    signal in_id_V_0_ack_out : STD_LOGIC;
    signal in_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_id_V_0_sel_rd : STD_LOGIC := '0';
    signal in_id_V_0_sel_wr : STD_LOGIC := '0';
    signal in_id_V_0_sel : STD_LOGIC;
    signal in_id_V_0_load_A : STD_LOGIC;
    signal in_id_V_0_load_B : STD_LOGIC;
    signal in_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_id_V_0_state_cmp_full : STD_LOGIC;
    signal in_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_dest_V_0_vld_in : STD_LOGIC;
    signal in_dest_V_0_vld_out : STD_LOGIC;
    signal in_dest_V_0_ack_in : STD_LOGIC;
    signal in_dest_V_0_ack_out : STD_LOGIC;
    signal in_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal in_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal in_dest_V_0_sel : STD_LOGIC;
    signal in_dest_V_0_load_A : STD_LOGIC;
    signal in_dest_V_0_load_B : STD_LOGIC;
    signal in_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_dest_V_0_state_cmp_full : STD_LOGIC;
    signal out_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_V_1_vld_in : STD_LOGIC;
    signal out_data_V_1_vld_out : STD_LOGIC;
    signal out_data_V_1_ack_in : STD_LOGIC;
    signal out_data_V_1_ack_out : STD_LOGIC;
    signal out_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_data_V_1_sel : STD_LOGIC;
    signal out_data_V_1_load_A : STD_LOGIC;
    signal out_data_V_1_load_B : STD_LOGIC;
    signal out_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_keep_V_1_vld_in : STD_LOGIC;
    signal out_keep_V_1_vld_out : STD_LOGIC;
    signal out_keep_V_1_ack_in : STD_LOGIC;
    signal out_keep_V_1_ack_out : STD_LOGIC;
    signal out_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal out_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal out_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal out_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal out_keep_V_1_sel : STD_LOGIC;
    signal out_keep_V_1_load_A : STD_LOGIC;
    signal out_keep_V_1_load_B : STD_LOGIC;
    signal out_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_keep_V_1_state_cmp_full : STD_LOGIC;
    signal out_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_strb_V_1_vld_in : STD_LOGIC;
    signal out_strb_V_1_vld_out : STD_LOGIC;
    signal out_strb_V_1_ack_in : STD_LOGIC;
    signal out_strb_V_1_ack_out : STD_LOGIC;
    signal out_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal out_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal out_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal out_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal out_strb_V_1_sel : STD_LOGIC;
    signal out_strb_V_1_load_A : STD_LOGIC;
    signal out_strb_V_1_load_B : STD_LOGIC;
    signal out_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_strb_V_1_state_cmp_full : STD_LOGIC;
    signal out_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_user_V_1_vld_in : STD_LOGIC;
    signal out_user_V_1_vld_out : STD_LOGIC;
    signal out_user_V_1_ack_in : STD_LOGIC;
    signal out_user_V_1_ack_out : STD_LOGIC;
    signal out_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_user_V_1_sel_wr : STD_LOGIC := '0';
    signal out_user_V_1_sel : STD_LOGIC;
    signal out_user_V_1_load_A : STD_LOGIC;
    signal out_user_V_1_load_B : STD_LOGIC;
    signal out_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_user_V_1_state_cmp_full : STD_LOGIC;
    signal out_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_vld_in : STD_LOGIC;
    signal out_last_V_1_vld_out : STD_LOGIC;
    signal out_last_V_1_ack_in : STD_LOGIC;
    signal out_last_V_1_ack_out : STD_LOGIC;
    signal out_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_last_V_1_sel : STD_LOGIC;
    signal out_last_V_1_load_A : STD_LOGIC;
    signal out_last_V_1_load_B : STD_LOGIC;
    signal out_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_last_V_1_state_cmp_full : STD_LOGIC;
    signal out_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_id_V_1_vld_in : STD_LOGIC;
    signal out_id_V_1_vld_out : STD_LOGIC;
    signal out_id_V_1_ack_in : STD_LOGIC;
    signal out_id_V_1_ack_out : STD_LOGIC;
    signal out_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_id_V_1_sel_wr : STD_LOGIC := '0';
    signal out_id_V_1_sel : STD_LOGIC;
    signal out_id_V_1_load_A : STD_LOGIC;
    signal out_id_V_1_load_B : STD_LOGIC;
    signal out_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_id_V_1_state_cmp_full : STD_LOGIC;
    signal out_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_dest_V_1_vld_in : STD_LOGIC;
    signal out_dest_V_1_vld_out : STD_LOGIC;
    signal out_dest_V_1_ack_in : STD_LOGIC;
    signal out_dest_V_1_ack_out : STD_LOGIC;
    signal out_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal out_dest_V_1_sel : STD_LOGIC;
    signal out_dest_V_1_load_A : STD_LOGIC;
    signal out_dest_V_1_load_B : STD_LOGIC;
    signal out_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_dest_V_1_state_cmp_full : STD_LOGIC;
    signal grp_mnist_lstm_fu_456_out_r_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mnist_lstm_fu_456_out_r_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mnist_lstm_fu_456_out_r_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mnist_lstm_fu_456_out_r_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mnist_lstm_fu_456_out_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mnist_lstm_fu_456_out_r_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mnist_lstm_fu_456_out_r_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mnist_lstm_fu_456_in_r_TVALID : STD_LOGIC;
    signal grp_mnist_lstm_fu_456_in_r_TREADY : STD_LOGIC;
    signal grp_mnist_lstm_fu_456_ap_start : STD_LOGIC;
    signal grp_mnist_lstm_fu_456_out_r_TVALID : STD_LOGIC;
    signal grp_mnist_lstm_fu_456_out_r_TREADY : STD_LOGIC;
    signal grp_mnist_lstm_fu_456_ap_done : STD_LOGIC;
    signal grp_mnist_lstm_fu_456_ap_ready : STD_LOGIC;
    signal grp_mnist_lstm_fu_456_ap_idle : STD_LOGIC;
    signal grp_mnist_lstm_fu_456_ap_continue : STD_LOGIC;
    signal grp_mnist_lstm_fu_456_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_mnist_lstm_fu_456_ap_ready : STD_LOGIC;
    signal ap_sync_grp_mnist_lstm_fu_456_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_mnist_lstm_fu_456_ap_done : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4 : BOOLEAN;

    component mnist_lstm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        in_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        in_r_TVALID : IN STD_LOGIC;
        in_r_TREADY : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    grp_mnist_lstm_fu_456 : component mnist_lstm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        in_r_TDATA => in_data_V_0_data_out,
        in_r_TKEEP => in_keep_V_0_data_out,
        in_r_TSTRB => in_strb_V_0_data_out,
        in_r_TUSER => in_user_V_0_data_out,
        in_r_TLAST => in_last_V_0_data_out,
        in_r_TID => in_id_V_0_data_out,
        in_r_TDEST => in_dest_V_0_data_out,
        out_r_TDATA => grp_mnist_lstm_fu_456_out_r_TDATA,
        out_r_TKEEP => grp_mnist_lstm_fu_456_out_r_TKEEP,
        out_r_TSTRB => grp_mnist_lstm_fu_456_out_r_TSTRB,
        out_r_TUSER => grp_mnist_lstm_fu_456_out_r_TUSER,
        out_r_TLAST => grp_mnist_lstm_fu_456_out_r_TLAST,
        out_r_TID => grp_mnist_lstm_fu_456_out_r_TID,
        out_r_TDEST => grp_mnist_lstm_fu_456_out_r_TDEST,
        in_r_TVALID => grp_mnist_lstm_fu_456_in_r_TVALID,
        in_r_TREADY => grp_mnist_lstm_fu_456_in_r_TREADY,
        ap_start => grp_mnist_lstm_fu_456_ap_start,
        out_r_TVALID => grp_mnist_lstm_fu_456_out_r_TVALID,
        out_r_TREADY => grp_mnist_lstm_fu_456_out_r_TREADY,
        ap_done => grp_mnist_lstm_fu_456_ap_done,
        ap_ready => grp_mnist_lstm_fu_456_ap_ready,
        ap_idle => grp_mnist_lstm_fu_456_ap_idle,
        ap_continue => grp_mnist_lstm_fu_456_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_mnist_lstm_fu_456_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_mnist_lstm_fu_456_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_mnist_lstm_fu_456_ap_done <= ap_const_logic_0;
                elsif ((grp_mnist_lstm_fu_456_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_mnist_lstm_fu_456_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready <= ap_const_logic_0;
                elsif ((grp_mnist_lstm_fu_456_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_mnist_lstm_fu_456_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mnist_lstm_fu_456_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_sync_grp_mnist_lstm_fu_456_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_mnist_lstm_fu_456_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mnist_lstm_fu_456_ap_ready = ap_const_logic_1)) then 
                    grp_mnist_lstm_fu_456_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_data_V_0_ack_out = ap_const_logic_1) and (in_data_V_0_vld_out = ap_const_logic_1))) then 
                                        in_data_V_0_sel_rd <= not(in_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_data_V_0_ack_in = ap_const_logic_1) and (in_data_V_0_vld_in = ap_const_logic_1))) then 
                                        in_data_V_0_sel_wr <= not(in_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_data_V_0_vld_in = ap_const_logic_0) and (in_data_V_0_state = ap_const_lv2_2)) or ((in_data_V_0_vld_in = ap_const_logic_0) and (in_data_V_0_state = ap_const_lv2_3) and (in_data_V_0_ack_out = ap_const_logic_1)))) then 
                    in_data_V_0_state <= ap_const_lv2_2;
                elsif ((((in_data_V_0_ack_out = ap_const_logic_0) and (in_data_V_0_state = ap_const_lv2_1)) or ((in_data_V_0_ack_out = ap_const_logic_0) and (in_data_V_0_state = ap_const_lv2_3) and (in_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_data_V_0_vld_in = ap_const_logic_0) and (in_data_V_0_ack_out = ap_const_logic_1))) and not(((in_data_V_0_ack_out = ap_const_logic_0) and (in_data_V_0_vld_in = ap_const_logic_1))) and (in_data_V_0_state = ap_const_lv2_3)) or ((in_data_V_0_state = ap_const_lv2_1) and (in_data_V_0_ack_out = ap_const_logic_1)) or ((in_data_V_0_state = ap_const_lv2_2) and (in_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_dest_V_0_ack_out = ap_const_logic_1) and (in_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        in_dest_V_0_sel_rd <= not(in_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_dest_V_0_ack_in = ap_const_logic_1) and (in_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        in_dest_V_0_sel_wr <= not(in_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_dest_V_0_state = ap_const_lv2_2) and (in_dest_V_0_vld_in = ap_const_logic_0)) or ((in_dest_V_0_state = ap_const_lv2_3) and (in_dest_V_0_vld_in = ap_const_logic_0) and (in_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    in_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((in_dest_V_0_state = ap_const_lv2_1) and (in_dest_V_0_ack_out = ap_const_logic_0)) or ((in_dest_V_0_state = ap_const_lv2_3) and (in_dest_V_0_ack_out = ap_const_logic_0) and (in_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_dest_V_0_vld_in = ap_const_logic_0) and (in_dest_V_0_ack_out = ap_const_logic_1))) and not(((in_dest_V_0_ack_out = ap_const_logic_0) and (in_dest_V_0_vld_in = ap_const_logic_1))) and (in_dest_V_0_state = ap_const_lv2_3)) or ((in_dest_V_0_state = ap_const_lv2_1) and (in_dest_V_0_ack_out = ap_const_logic_1)) or ((in_dest_V_0_state = ap_const_lv2_2) and (in_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_dest_V_0_state <= ap_const_lv2_3;
                else 
                    in_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_id_V_0_ack_out = ap_const_logic_1) and (in_id_V_0_vld_out = ap_const_logic_1))) then 
                                        in_id_V_0_sel_rd <= not(in_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_id_V_0_ack_in = ap_const_logic_1) and (in_id_V_0_vld_in = ap_const_logic_1))) then 
                                        in_id_V_0_sel_wr <= not(in_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_id_V_0_state = ap_const_lv2_2) and (in_id_V_0_vld_in = ap_const_logic_0)) or ((in_id_V_0_state = ap_const_lv2_3) and (in_id_V_0_vld_in = ap_const_logic_0) and (in_id_V_0_ack_out = ap_const_logic_1)))) then 
                    in_id_V_0_state <= ap_const_lv2_2;
                elsif ((((in_id_V_0_state = ap_const_lv2_1) and (in_id_V_0_ack_out = ap_const_logic_0)) or ((in_id_V_0_state = ap_const_lv2_3) and (in_id_V_0_ack_out = ap_const_logic_0) and (in_id_V_0_vld_in = ap_const_logic_1)))) then 
                    in_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_id_V_0_vld_in = ap_const_logic_0) and (in_id_V_0_ack_out = ap_const_logic_1))) and not(((in_id_V_0_ack_out = ap_const_logic_0) and (in_id_V_0_vld_in = ap_const_logic_1))) and (in_id_V_0_state = ap_const_lv2_3)) or ((in_id_V_0_state = ap_const_lv2_1) and (in_id_V_0_ack_out = ap_const_logic_1)) or ((in_id_V_0_state = ap_const_lv2_2) and (in_id_V_0_vld_in = ap_const_logic_1)))) then 
                    in_id_V_0_state <= ap_const_lv2_3;
                else 
                    in_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_keep_V_0_ack_out = ap_const_logic_1) and (in_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        in_keep_V_0_sel_rd <= not(in_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_keep_V_0_ack_in = ap_const_logic_1) and (in_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        in_keep_V_0_sel_wr <= not(in_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_keep_V_0_state = ap_const_lv2_2) and (in_keep_V_0_vld_in = ap_const_logic_0)) or ((in_keep_V_0_state = ap_const_lv2_3) and (in_keep_V_0_vld_in = ap_const_logic_0) and (in_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    in_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((in_keep_V_0_state = ap_const_lv2_3) and (in_keep_V_0_ack_out = ap_const_logic_0) and (in_keep_V_0_vld_in = ap_const_logic_1)) or ((in_keep_V_0_state = ap_const_lv2_1) and (in_keep_V_0_ack_out = ap_const_logic_0)))) then 
                    in_keep_V_0_state <= ap_const_lv2_1;
                elsif ((((in_keep_V_0_state = ap_const_lv2_2) and (in_keep_V_0_vld_in = ap_const_logic_1)) or (not(((in_keep_V_0_vld_in = ap_const_logic_0) and (in_keep_V_0_ack_out = ap_const_logic_1))) and not(((in_keep_V_0_ack_out = ap_const_logic_0) and (in_keep_V_0_vld_in = ap_const_logic_1))) and (in_keep_V_0_state = ap_const_lv2_3)) or ((in_keep_V_0_state = ap_const_lv2_1) and (in_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    in_keep_V_0_state <= ap_const_lv2_3;
                else 
                    in_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_last_V_0_ack_out = ap_const_logic_1) and (in_last_V_0_vld_out = ap_const_logic_1))) then 
                                        in_last_V_0_sel_rd <= not(in_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_last_V_0_ack_in = ap_const_logic_1) and (in_last_V_0_vld_in = ap_const_logic_1))) then 
                                        in_last_V_0_sel_wr <= not(in_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_last_V_0_state = ap_const_lv2_2) and (in_last_V_0_vld_in = ap_const_logic_0)) or ((in_last_V_0_state = ap_const_lv2_3) and (in_last_V_0_vld_in = ap_const_logic_0) and (in_last_V_0_ack_out = ap_const_logic_1)))) then 
                    in_last_V_0_state <= ap_const_lv2_2;
                elsif ((((in_last_V_0_state = ap_const_lv2_1) and (in_last_V_0_ack_out = ap_const_logic_0)) or ((in_last_V_0_state = ap_const_lv2_3) and (in_last_V_0_ack_out = ap_const_logic_0) and (in_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_last_V_0_vld_in = ap_const_logic_0) and (in_last_V_0_ack_out = ap_const_logic_1))) and not(((in_last_V_0_ack_out = ap_const_logic_0) and (in_last_V_0_vld_in = ap_const_logic_1))) and (in_last_V_0_state = ap_const_lv2_3)) or ((in_last_V_0_state = ap_const_lv2_1) and (in_last_V_0_ack_out = ap_const_logic_1)) or ((in_last_V_0_state = ap_const_lv2_2) and (in_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_last_V_0_state <= ap_const_lv2_3;
                else 
                    in_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_strb_V_0_ack_out = ap_const_logic_1) and (in_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        in_strb_V_0_sel_rd <= not(in_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_strb_V_0_ack_in = ap_const_logic_1) and (in_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        in_strb_V_0_sel_wr <= not(in_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_strb_V_0_state = ap_const_lv2_2) and (in_strb_V_0_vld_in = ap_const_logic_0)) or ((in_strb_V_0_state = ap_const_lv2_3) and (in_strb_V_0_vld_in = ap_const_logic_0) and (in_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    in_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((in_strb_V_0_state = ap_const_lv2_1) and (in_strb_V_0_ack_out = ap_const_logic_0)) or ((in_strb_V_0_state = ap_const_lv2_3) and (in_strb_V_0_ack_out = ap_const_logic_0) and (in_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    in_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_strb_V_0_vld_in = ap_const_logic_0) and (in_strb_V_0_ack_out = ap_const_logic_1))) and not(((in_strb_V_0_ack_out = ap_const_logic_0) and (in_strb_V_0_vld_in = ap_const_logic_1))) and (in_strb_V_0_state = ap_const_lv2_3)) or ((in_strb_V_0_state = ap_const_lv2_1) and (in_strb_V_0_ack_out = ap_const_logic_1)) or ((in_strb_V_0_state = ap_const_lv2_2) and (in_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    in_strb_V_0_state <= ap_const_lv2_3;
                else 
                    in_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_user_V_0_ack_out = ap_const_logic_1) and (in_user_V_0_vld_out = ap_const_logic_1))) then 
                                        in_user_V_0_sel_rd <= not(in_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_user_V_0_ack_in = ap_const_logic_1) and (in_user_V_0_vld_in = ap_const_logic_1))) then 
                                        in_user_V_0_sel_wr <= not(in_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_user_V_0_state = ap_const_lv2_2) and (in_user_V_0_vld_in = ap_const_logic_0)) or ((in_user_V_0_state = ap_const_lv2_3) and (in_user_V_0_vld_in = ap_const_logic_0) and (in_user_V_0_ack_out = ap_const_logic_1)))) then 
                    in_user_V_0_state <= ap_const_lv2_2;
                elsif ((((in_user_V_0_state = ap_const_lv2_1) and (in_user_V_0_ack_out = ap_const_logic_0)) or ((in_user_V_0_state = ap_const_lv2_3) and (in_user_V_0_ack_out = ap_const_logic_0) and (in_user_V_0_vld_in = ap_const_logic_1)))) then 
                    in_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_user_V_0_vld_in = ap_const_logic_0) and (in_user_V_0_ack_out = ap_const_logic_1))) and not(((in_user_V_0_ack_out = ap_const_logic_0) and (in_user_V_0_vld_in = ap_const_logic_1))) and (in_user_V_0_state = ap_const_lv2_3)) or ((in_user_V_0_state = ap_const_lv2_1) and (in_user_V_0_ack_out = ap_const_logic_1)) or ((in_user_V_0_state = ap_const_lv2_2) and (in_user_V_0_vld_in = ap_const_logic_1)))) then 
                    in_user_V_0_state <= ap_const_lv2_3;
                else 
                    in_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_data_V_1_ack_out = ap_const_logic_1) and (out_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_data_V_1_sel_rd <= not(out_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_data_V_1_ack_in = ap_const_logic_1) and (out_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_data_V_1_sel_wr <= not(out_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_data_V_1_state = ap_const_lv2_2) and (out_data_V_1_vld_in = ap_const_logic_0)) or ((out_data_V_1_state = ap_const_lv2_3) and (out_data_V_1_vld_in = ap_const_logic_0) and (out_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_data_V_1_state = ap_const_lv2_1) and (out_data_V_1_ack_out = ap_const_logic_0)) or ((out_data_V_1_state = ap_const_lv2_3) and (out_data_V_1_ack_out = ap_const_logic_0) and (out_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_data_V_1_vld_in = ap_const_logic_0) and (out_data_V_1_ack_out = ap_const_logic_1))) and not(((out_data_V_1_ack_out = ap_const_logic_0) and (out_data_V_1_vld_in = ap_const_logic_1))) and (out_data_V_1_state = ap_const_lv2_3)) or ((out_data_V_1_state = ap_const_lv2_1) and (out_data_V_1_ack_out = ap_const_logic_1)) or ((out_data_V_1_state = ap_const_lv2_2) and (out_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_dest_V_1_ack_out = ap_const_logic_1) and (out_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        out_dest_V_1_sel_rd <= not(out_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_dest_V_1_ack_in = ap_const_logic_1) and (out_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        out_dest_V_1_sel_wr <= not(out_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_dest_V_1_state = ap_const_lv2_2) and (out_dest_V_1_vld_in = ap_const_logic_0)) or ((out_dest_V_1_state = ap_const_lv2_3) and (out_dest_V_1_vld_in = ap_const_logic_0) and (out_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    out_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((out_dest_V_1_state = ap_const_lv2_1) and (out_dest_V_1_ack_out = ap_const_logic_0)) or ((out_dest_V_1_state = ap_const_lv2_3) and (out_dest_V_1_ack_out = ap_const_logic_0) and (out_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_dest_V_1_vld_in = ap_const_logic_0) and (out_dest_V_1_ack_out = ap_const_logic_1))) and not(((out_dest_V_1_ack_out = ap_const_logic_0) and (out_dest_V_1_vld_in = ap_const_logic_1))) and (out_dest_V_1_state = ap_const_lv2_3)) or ((out_dest_V_1_state = ap_const_lv2_1) and (out_dest_V_1_ack_out = ap_const_logic_1)) or ((out_dest_V_1_state = ap_const_lv2_2) and (out_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_id_V_1_ack_out = ap_const_logic_1) and (out_id_V_1_vld_out = ap_const_logic_1))) then 
                                        out_id_V_1_sel_rd <= not(out_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_id_V_1_ack_in = ap_const_logic_1) and (out_id_V_1_vld_in = ap_const_logic_1))) then 
                                        out_id_V_1_sel_wr <= not(out_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_id_V_1_state = ap_const_lv2_2) and (out_id_V_1_vld_in = ap_const_logic_0)) or ((out_id_V_1_state = ap_const_lv2_3) and (out_id_V_1_vld_in = ap_const_logic_0) and (out_id_V_1_ack_out = ap_const_logic_1)))) then 
                    out_id_V_1_state <= ap_const_lv2_2;
                elsif ((((out_id_V_1_state = ap_const_lv2_1) and (out_id_V_1_ack_out = ap_const_logic_0)) or ((out_id_V_1_state = ap_const_lv2_3) and (out_id_V_1_ack_out = ap_const_logic_0) and (out_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_id_V_1_vld_in = ap_const_logic_0) and (out_id_V_1_ack_out = ap_const_logic_1))) and not(((out_id_V_1_ack_out = ap_const_logic_0) and (out_id_V_1_vld_in = ap_const_logic_1))) and (out_id_V_1_state = ap_const_lv2_3)) or ((out_id_V_1_state = ap_const_lv2_1) and (out_id_V_1_ack_out = ap_const_logic_1)) or ((out_id_V_1_state = ap_const_lv2_2) and (out_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_keep_V_1_ack_out = ap_const_logic_1) and (out_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        out_keep_V_1_sel_rd <= not(out_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_keep_V_1_ack_in = ap_const_logic_1) and (out_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        out_keep_V_1_sel_wr <= not(out_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_keep_V_1_state = ap_const_lv2_2) and (out_keep_V_1_vld_in = ap_const_logic_0)) or ((out_keep_V_1_state = ap_const_lv2_3) and (out_keep_V_1_vld_in = ap_const_logic_0) and (out_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    out_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((out_keep_V_1_state = ap_const_lv2_1) and (out_keep_V_1_ack_out = ap_const_logic_0)) or ((out_keep_V_1_state = ap_const_lv2_3) and (out_keep_V_1_ack_out = ap_const_logic_0) and (out_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_keep_V_1_vld_in = ap_const_logic_0) and (out_keep_V_1_ack_out = ap_const_logic_1))) and not(((out_keep_V_1_ack_out = ap_const_logic_0) and (out_keep_V_1_vld_in = ap_const_logic_1))) and (out_keep_V_1_state = ap_const_lv2_3)) or ((out_keep_V_1_state = ap_const_lv2_1) and (out_keep_V_1_ack_out = ap_const_logic_1)) or ((out_keep_V_1_state = ap_const_lv2_2) and (out_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_keep_V_1_state <= ap_const_lv2_3;
                else 
                    out_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_last_V_1_ack_out = ap_const_logic_1) and (out_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_last_V_1_sel_rd <= not(out_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_last_V_1_ack_in = ap_const_logic_1) and (out_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_last_V_1_sel_wr <= not(out_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_last_V_1_state = ap_const_lv2_2) and (out_last_V_1_vld_in = ap_const_logic_0)) or ((out_last_V_1_state = ap_const_lv2_3) and (out_last_V_1_vld_in = ap_const_logic_0) and (out_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_last_V_1_state = ap_const_lv2_1) and (out_last_V_1_ack_out = ap_const_logic_0)) or ((out_last_V_1_state = ap_const_lv2_3) and (out_last_V_1_ack_out = ap_const_logic_0) and (out_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_last_V_1_vld_in = ap_const_logic_0) and (out_last_V_1_ack_out = ap_const_logic_1))) and not(((out_last_V_1_ack_out = ap_const_logic_0) and (out_last_V_1_vld_in = ap_const_logic_1))) and (out_last_V_1_state = ap_const_lv2_3)) or ((out_last_V_1_state = ap_const_lv2_1) and (out_last_V_1_ack_out = ap_const_logic_1)) or ((out_last_V_1_state = ap_const_lv2_2) and (out_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_strb_V_1_ack_out = ap_const_logic_1) and (out_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        out_strb_V_1_sel_rd <= not(out_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_strb_V_1_ack_in = ap_const_logic_1) and (out_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        out_strb_V_1_sel_wr <= not(out_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_strb_V_1_state = ap_const_lv2_2) and (out_strb_V_1_vld_in = ap_const_logic_0)) or ((out_strb_V_1_state = ap_const_lv2_3) and (out_strb_V_1_vld_in = ap_const_logic_0) and (out_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    out_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((out_strb_V_1_state = ap_const_lv2_1) and (out_strb_V_1_ack_out = ap_const_logic_0)) or ((out_strb_V_1_state = ap_const_lv2_3) and (out_strb_V_1_ack_out = ap_const_logic_0) and (out_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_strb_V_1_vld_in = ap_const_logic_0) and (out_strb_V_1_ack_out = ap_const_logic_1))) and not(((out_strb_V_1_ack_out = ap_const_logic_0) and (out_strb_V_1_vld_in = ap_const_logic_1))) and (out_strb_V_1_state = ap_const_lv2_3)) or ((out_strb_V_1_state = ap_const_lv2_1) and (out_strb_V_1_ack_out = ap_const_logic_1)) or ((out_strb_V_1_state = ap_const_lv2_2) and (out_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_strb_V_1_state <= ap_const_lv2_3;
                else 
                    out_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_user_V_1_ack_out = ap_const_logic_1) and (out_user_V_1_vld_out = ap_const_logic_1))) then 
                                        out_user_V_1_sel_rd <= not(out_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_user_V_1_ack_in = ap_const_logic_1) and (out_user_V_1_vld_in = ap_const_logic_1))) then 
                                        out_user_V_1_sel_wr <= not(out_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_user_V_1_state = ap_const_lv2_2) and (out_user_V_1_vld_in = ap_const_logic_0)) or ((out_user_V_1_state = ap_const_lv2_3) and (out_user_V_1_vld_in = ap_const_logic_0) and (out_user_V_1_ack_out = ap_const_logic_1)))) then 
                    out_user_V_1_state <= ap_const_lv2_2;
                elsif ((((out_user_V_1_state = ap_const_lv2_1) and (out_user_V_1_ack_out = ap_const_logic_0)) or ((out_user_V_1_state = ap_const_lv2_3) and (out_user_V_1_ack_out = ap_const_logic_0) and (out_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_user_V_1_vld_in = ap_const_logic_0) and (out_user_V_1_ack_out = ap_const_logic_1))) and not(((out_user_V_1_ack_out = ap_const_logic_0) and (out_user_V_1_vld_in = ap_const_logic_1))) and (out_user_V_1_state = ap_const_lv2_3)) or ((out_user_V_1_state = ap_const_lv2_1) and (out_user_V_1_ack_out = ap_const_logic_1)) or ((out_user_V_1_state = ap_const_lv2_2) and (out_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_V_0_load_A = ap_const_logic_1)) then
                in_data_V_0_payload_A <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_V_0_load_B = ap_const_logic_1)) then
                in_data_V_0_payload_B <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_dest_V_0_load_A = ap_const_logic_1)) then
                in_dest_V_0_payload_A <= in_r_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_dest_V_0_load_B = ap_const_logic_1)) then
                in_dest_V_0_payload_B <= in_r_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_id_V_0_load_A = ap_const_logic_1)) then
                in_id_V_0_payload_A <= in_r_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_id_V_0_load_B = ap_const_logic_1)) then
                in_id_V_0_payload_B <= in_r_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_keep_V_0_load_A = ap_const_logic_1)) then
                in_keep_V_0_payload_A <= in_r_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_keep_V_0_load_B = ap_const_logic_1)) then
                in_keep_V_0_payload_B <= in_r_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_last_V_0_load_A = ap_const_logic_1)) then
                in_last_V_0_payload_A <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_last_V_0_load_B = ap_const_logic_1)) then
                in_last_V_0_payload_B <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_strb_V_0_load_A = ap_const_logic_1)) then
                in_strb_V_0_payload_A <= in_r_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_strb_V_0_load_B = ap_const_logic_1)) then
                in_strb_V_0_payload_B <= in_r_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_user_V_0_load_A = ap_const_logic_1)) then
                in_user_V_0_payload_A <= in_r_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_user_V_0_load_B = ap_const_logic_1)) then
                in_user_V_0_payload_B <= in_r_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_V_1_load_A = ap_const_logic_1)) then
                out_data_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_V_1_load_B = ap_const_logic_1)) then
                out_data_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_dest_V_1_load_A = ap_const_logic_1)) then
                out_dest_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_dest_V_1_load_B = ap_const_logic_1)) then
                out_dest_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_id_V_1_load_A = ap_const_logic_1)) then
                out_id_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_id_V_1_load_B = ap_const_logic_1)) then
                out_id_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_keep_V_1_load_A = ap_const_logic_1)) then
                out_keep_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_keep_V_1_load_B = ap_const_logic_1)) then
                out_keep_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_last_V_1_load_A = ap_const_logic_1)) then
                out_last_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_last_V_1_load_B = ap_const_logic_1)) then
                out_last_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_strb_V_1_load_A = ap_const_logic_1)) then
                out_strb_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_strb_V_1_load_B = ap_const_logic_1)) then
                out_strb_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_user_V_1_load_A = ap_const_logic_1)) then
                out_user_V_1_payload_A <= grp_mnist_lstm_fu_456_out_r_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_user_V_1_load_B = ap_const_logic_1)) then
                out_user_V_1_payload_B <= grp_mnist_lstm_fu_456_out_r_TUSER;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (out_data_V_1_ack_in, out_data_V_1_state, out_keep_V_1_ack_in, out_keep_V_1_state, out_strb_V_1_ack_in, out_strb_V_1_state, out_user_V_1_ack_in, out_user_V_1_state, out_last_V_1_ack_in, out_last_V_1_state, out_id_V_1_ack_in, out_id_V_1_state, out_dest_V_1_ack_in, out_dest_V_1_state, ap_CS_fsm, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((out_dest_V_1_ack_in = ap_const_logic_0) or (out_id_V_1_ack_in = ap_const_logic_0) or (out_last_V_1_ack_in = ap_const_logic_0) or (out_user_V_1_ack_in = ap_const_logic_0) or (out_strb_V_1_ack_in = ap_const_logic_0) or (out_keep_V_1_ack_in = ap_const_logic_0) or (out_data_V_1_ack_in = ap_const_logic_0))) and (out_dest_V_1_state(0) = ap_const_logic_0) and (out_id_V_1_state(0) = ap_const_logic_0) and (out_last_V_1_state(0) = ap_const_logic_0) and (out_user_V_1_state(0) = ap_const_logic_0) and (out_strb_V_1_state(0) = ap_const_logic_0) and (out_keep_V_1_state(0) = ap_const_logic_0) and (out_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_grp_mnist_lstm_fu_456_ap_ready, ap_sync_grp_mnist_lstm_fu_456_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_sync_grp_mnist_lstm_fu_456_ap_ready and ap_sync_grp_mnist_lstm_fu_456_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state4_assign_proc : process(out_data_V_1_ack_in, out_keep_V_1_ack_in, out_strb_V_1_ack_in, out_user_V_1_ack_in, out_last_V_1_ack_in, out_id_V_1_ack_in, out_dest_V_1_ack_in)
    begin
                ap_block_state4 <= ((out_dest_V_1_ack_in = ap_const_logic_0) or (out_id_V_1_ack_in = ap_const_logic_0) or (out_last_V_1_ack_in = ap_const_logic_0) or (out_user_V_1_ack_in = ap_const_logic_0) or (out_strb_V_1_ack_in = ap_const_logic_0) or (out_keep_V_1_ack_in = ap_const_logic_0) or (out_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_mnist_lstm_fu_456_ap_done <= (grp_mnist_lstm_fu_456_ap_done or ap_sync_reg_grp_mnist_lstm_fu_456_ap_done);
    ap_sync_grp_mnist_lstm_fu_456_ap_ready <= (grp_mnist_lstm_fu_456_ap_ready or ap_sync_reg_grp_mnist_lstm_fu_456_ap_ready);

    grp_mnist_lstm_fu_456_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_mnist_lstm_fu_456_ap_continue <= ap_const_logic_1;
        else 
            grp_mnist_lstm_fu_456_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_mnist_lstm_fu_456_ap_start <= grp_mnist_lstm_fu_456_ap_start_reg;
    grp_mnist_lstm_fu_456_in_r_TVALID <= in_dest_V_0_state(0);
    grp_mnist_lstm_fu_456_out_r_TREADY <= ((out_dest_V_1_ack_in and ap_CS_fsm_state3) or (out_id_V_1_ack_in and ap_CS_fsm_state3) or (out_last_V_1_ack_in and ap_CS_fsm_state3) or (out_user_V_1_ack_in and ap_CS_fsm_state3) or (out_strb_V_1_ack_in and ap_CS_fsm_state3) or (out_keep_V_1_ack_in and ap_CS_fsm_state3) or (out_data_V_1_ack_in and ap_CS_fsm_state3));
    in_data_V_0_ack_in <= in_data_V_0_state(1);

    in_data_V_0_ack_out_assign_proc : process(grp_mnist_lstm_fu_456_in_r_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_data_V_0_ack_out <= grp_mnist_lstm_fu_456_in_r_TREADY;
        else 
            in_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_V_0_data_out_assign_proc : process(in_data_V_0_payload_A, in_data_V_0_payload_B, in_data_V_0_sel)
    begin
        if ((in_data_V_0_sel = ap_const_logic_1)) then 
            in_data_V_0_data_out <= in_data_V_0_payload_B;
        else 
            in_data_V_0_data_out <= in_data_V_0_payload_A;
        end if; 
    end process;

    in_data_V_0_load_A <= (in_data_V_0_state_cmp_full and not(in_data_V_0_sel_wr));
    in_data_V_0_load_B <= (in_data_V_0_state_cmp_full and in_data_V_0_sel_wr);
    in_data_V_0_sel <= in_data_V_0_sel_rd;
    in_data_V_0_state_cmp_full <= '0' when (in_data_V_0_state = ap_const_lv2_1) else '1';
    in_data_V_0_vld_in <= in_r_TVALID;
    in_data_V_0_vld_out <= in_data_V_0_state(0);
    in_dest_V_0_ack_in <= in_dest_V_0_state(1);

    in_dest_V_0_ack_out_assign_proc : process(grp_mnist_lstm_fu_456_in_r_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_dest_V_0_ack_out <= grp_mnist_lstm_fu_456_in_r_TREADY;
        else 
            in_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_dest_V_0_data_out_assign_proc : process(in_dest_V_0_payload_A, in_dest_V_0_payload_B, in_dest_V_0_sel)
    begin
        if ((in_dest_V_0_sel = ap_const_logic_1)) then 
            in_dest_V_0_data_out <= in_dest_V_0_payload_B;
        else 
            in_dest_V_0_data_out <= in_dest_V_0_payload_A;
        end if; 
    end process;

    in_dest_V_0_load_A <= (in_dest_V_0_state_cmp_full and not(in_dest_V_0_sel_wr));
    in_dest_V_0_load_B <= (in_dest_V_0_state_cmp_full and in_dest_V_0_sel_wr);
    in_dest_V_0_sel <= in_dest_V_0_sel_rd;
    in_dest_V_0_state_cmp_full <= '0' when (in_dest_V_0_state = ap_const_lv2_1) else '1';
    in_dest_V_0_vld_in <= in_r_TVALID;
    in_dest_V_0_vld_out <= in_dest_V_0_state(0);
    in_id_V_0_ack_in <= in_id_V_0_state(1);

    in_id_V_0_ack_out_assign_proc : process(grp_mnist_lstm_fu_456_in_r_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_id_V_0_ack_out <= grp_mnist_lstm_fu_456_in_r_TREADY;
        else 
            in_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_id_V_0_data_out_assign_proc : process(in_id_V_0_payload_A, in_id_V_0_payload_B, in_id_V_0_sel)
    begin
        if ((in_id_V_0_sel = ap_const_logic_1)) then 
            in_id_V_0_data_out <= in_id_V_0_payload_B;
        else 
            in_id_V_0_data_out <= in_id_V_0_payload_A;
        end if; 
    end process;

    in_id_V_0_load_A <= (in_id_V_0_state_cmp_full and not(in_id_V_0_sel_wr));
    in_id_V_0_load_B <= (in_id_V_0_state_cmp_full and in_id_V_0_sel_wr);
    in_id_V_0_sel <= in_id_V_0_sel_rd;
    in_id_V_0_state_cmp_full <= '0' when (in_id_V_0_state = ap_const_lv2_1) else '1';
    in_id_V_0_vld_in <= in_r_TVALID;
    in_id_V_0_vld_out <= in_id_V_0_state(0);
    in_keep_V_0_ack_in <= in_keep_V_0_state(1);

    in_keep_V_0_ack_out_assign_proc : process(grp_mnist_lstm_fu_456_in_r_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_keep_V_0_ack_out <= grp_mnist_lstm_fu_456_in_r_TREADY;
        else 
            in_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_keep_V_0_data_out_assign_proc : process(in_keep_V_0_payload_A, in_keep_V_0_payload_B, in_keep_V_0_sel)
    begin
        if ((in_keep_V_0_sel = ap_const_logic_1)) then 
            in_keep_V_0_data_out <= in_keep_V_0_payload_B;
        else 
            in_keep_V_0_data_out <= in_keep_V_0_payload_A;
        end if; 
    end process;

    in_keep_V_0_load_A <= (in_keep_V_0_state_cmp_full and not(in_keep_V_0_sel_wr));
    in_keep_V_0_load_B <= (in_keep_V_0_state_cmp_full and in_keep_V_0_sel_wr);
    in_keep_V_0_sel <= in_keep_V_0_sel_rd;
    in_keep_V_0_state_cmp_full <= '0' when (in_keep_V_0_state = ap_const_lv2_1) else '1';
    in_keep_V_0_vld_in <= in_r_TVALID;
    in_keep_V_0_vld_out <= in_keep_V_0_state(0);
    in_last_V_0_ack_in <= in_last_V_0_state(1);

    in_last_V_0_ack_out_assign_proc : process(grp_mnist_lstm_fu_456_in_r_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_last_V_0_ack_out <= grp_mnist_lstm_fu_456_in_r_TREADY;
        else 
            in_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_last_V_0_data_out_assign_proc : process(in_last_V_0_payload_A, in_last_V_0_payload_B, in_last_V_0_sel)
    begin
        if ((in_last_V_0_sel = ap_const_logic_1)) then 
            in_last_V_0_data_out <= in_last_V_0_payload_B;
        else 
            in_last_V_0_data_out <= in_last_V_0_payload_A;
        end if; 
    end process;

    in_last_V_0_load_A <= (in_last_V_0_state_cmp_full and not(in_last_V_0_sel_wr));
    in_last_V_0_load_B <= (in_last_V_0_state_cmp_full and in_last_V_0_sel_wr);
    in_last_V_0_sel <= in_last_V_0_sel_rd;
    in_last_V_0_state_cmp_full <= '0' when (in_last_V_0_state = ap_const_lv2_1) else '1';
    in_last_V_0_vld_in <= in_r_TVALID;
    in_last_V_0_vld_out <= in_last_V_0_state(0);
    in_r_TREADY <= in_dest_V_0_state(1);
    in_strb_V_0_ack_in <= in_strb_V_0_state(1);

    in_strb_V_0_ack_out_assign_proc : process(grp_mnist_lstm_fu_456_in_r_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_strb_V_0_ack_out <= grp_mnist_lstm_fu_456_in_r_TREADY;
        else 
            in_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_strb_V_0_data_out_assign_proc : process(in_strb_V_0_payload_A, in_strb_V_0_payload_B, in_strb_V_0_sel)
    begin
        if ((in_strb_V_0_sel = ap_const_logic_1)) then 
            in_strb_V_0_data_out <= in_strb_V_0_payload_B;
        else 
            in_strb_V_0_data_out <= in_strb_V_0_payload_A;
        end if; 
    end process;

    in_strb_V_0_load_A <= (in_strb_V_0_state_cmp_full and not(in_strb_V_0_sel_wr));
    in_strb_V_0_load_B <= (in_strb_V_0_state_cmp_full and in_strb_V_0_sel_wr);
    in_strb_V_0_sel <= in_strb_V_0_sel_rd;
    in_strb_V_0_state_cmp_full <= '0' when (in_strb_V_0_state = ap_const_lv2_1) else '1';
    in_strb_V_0_vld_in <= in_r_TVALID;
    in_strb_V_0_vld_out <= in_strb_V_0_state(0);
    in_user_V_0_ack_in <= in_user_V_0_state(1);

    in_user_V_0_ack_out_assign_proc : process(grp_mnist_lstm_fu_456_in_r_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_user_V_0_ack_out <= grp_mnist_lstm_fu_456_in_r_TREADY;
        else 
            in_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_user_V_0_data_out_assign_proc : process(in_user_V_0_payload_A, in_user_V_0_payload_B, in_user_V_0_sel)
    begin
        if ((in_user_V_0_sel = ap_const_logic_1)) then 
            in_user_V_0_data_out <= in_user_V_0_payload_B;
        else 
            in_user_V_0_data_out <= in_user_V_0_payload_A;
        end if; 
    end process;

    in_user_V_0_load_A <= (in_user_V_0_state_cmp_full and not(in_user_V_0_sel_wr));
    in_user_V_0_load_B <= (in_user_V_0_state_cmp_full and in_user_V_0_sel_wr);
    in_user_V_0_sel <= in_user_V_0_sel_rd;
    in_user_V_0_state_cmp_full <= '0' when (in_user_V_0_state = ap_const_lv2_1) else '1';
    in_user_V_0_vld_in <= in_r_TVALID;
    in_user_V_0_vld_out <= in_user_V_0_state(0);
    out_data_V_1_ack_in <= out_data_V_1_state(1);
    out_data_V_1_ack_out <= out_r_TREADY;

    out_data_V_1_data_out_assign_proc : process(out_data_V_1_payload_A, out_data_V_1_payload_B, out_data_V_1_sel)
    begin
        if ((out_data_V_1_sel = ap_const_logic_1)) then 
            out_data_V_1_data_out <= out_data_V_1_payload_B;
        else 
            out_data_V_1_data_out <= out_data_V_1_payload_A;
        end if; 
    end process;

    out_data_V_1_load_A <= (out_data_V_1_state_cmp_full and not(out_data_V_1_sel_wr));
    out_data_V_1_load_B <= (out_data_V_1_state_cmp_full and out_data_V_1_sel_wr);
    out_data_V_1_sel <= out_data_V_1_sel_rd;
    out_data_V_1_state_cmp_full <= '0' when (out_data_V_1_state = ap_const_lv2_1) else '1';
    out_data_V_1_vld_in <= grp_mnist_lstm_fu_456_out_r_TVALID;
    out_data_V_1_vld_out <= out_data_V_1_state(0);
    out_dest_V_1_ack_in <= out_dest_V_1_state(1);
    out_dest_V_1_ack_out <= out_r_TREADY;

    out_dest_V_1_data_out_assign_proc : process(out_dest_V_1_payload_A, out_dest_V_1_payload_B, out_dest_V_1_sel)
    begin
        if ((out_dest_V_1_sel = ap_const_logic_1)) then 
            out_dest_V_1_data_out <= out_dest_V_1_payload_B;
        else 
            out_dest_V_1_data_out <= out_dest_V_1_payload_A;
        end if; 
    end process;

    out_dest_V_1_load_A <= (out_dest_V_1_state_cmp_full and not(out_dest_V_1_sel_wr));
    out_dest_V_1_load_B <= (out_dest_V_1_state_cmp_full and out_dest_V_1_sel_wr);
    out_dest_V_1_sel <= out_dest_V_1_sel_rd;
    out_dest_V_1_state_cmp_full <= '0' when (out_dest_V_1_state = ap_const_lv2_1) else '1';
    out_dest_V_1_vld_in <= grp_mnist_lstm_fu_456_out_r_TVALID;
    out_dest_V_1_vld_out <= out_dest_V_1_state(0);
    out_id_V_1_ack_in <= out_id_V_1_state(1);
    out_id_V_1_ack_out <= out_r_TREADY;

    out_id_V_1_data_out_assign_proc : process(out_id_V_1_payload_A, out_id_V_1_payload_B, out_id_V_1_sel)
    begin
        if ((out_id_V_1_sel = ap_const_logic_1)) then 
            out_id_V_1_data_out <= out_id_V_1_payload_B;
        else 
            out_id_V_1_data_out <= out_id_V_1_payload_A;
        end if; 
    end process;

    out_id_V_1_load_A <= (out_id_V_1_state_cmp_full and not(out_id_V_1_sel_wr));
    out_id_V_1_load_B <= (out_id_V_1_state_cmp_full and out_id_V_1_sel_wr);
    out_id_V_1_sel <= out_id_V_1_sel_rd;
    out_id_V_1_state_cmp_full <= '0' when (out_id_V_1_state = ap_const_lv2_1) else '1';
    out_id_V_1_vld_in <= grp_mnist_lstm_fu_456_out_r_TVALID;
    out_id_V_1_vld_out <= out_id_V_1_state(0);
    out_keep_V_1_ack_in <= out_keep_V_1_state(1);
    out_keep_V_1_ack_out <= out_r_TREADY;

    out_keep_V_1_data_out_assign_proc : process(out_keep_V_1_payload_A, out_keep_V_1_payload_B, out_keep_V_1_sel)
    begin
        if ((out_keep_V_1_sel = ap_const_logic_1)) then 
            out_keep_V_1_data_out <= out_keep_V_1_payload_B;
        else 
            out_keep_V_1_data_out <= out_keep_V_1_payload_A;
        end if; 
    end process;

    out_keep_V_1_load_A <= (out_keep_V_1_state_cmp_full and not(out_keep_V_1_sel_wr));
    out_keep_V_1_load_B <= (out_keep_V_1_state_cmp_full and out_keep_V_1_sel_wr);
    out_keep_V_1_sel <= out_keep_V_1_sel_rd;
    out_keep_V_1_state_cmp_full <= '0' when (out_keep_V_1_state = ap_const_lv2_1) else '1';
    out_keep_V_1_vld_in <= grp_mnist_lstm_fu_456_out_r_TVALID;
    out_keep_V_1_vld_out <= out_keep_V_1_state(0);
    out_last_V_1_ack_in <= out_last_V_1_state(1);
    out_last_V_1_ack_out <= out_r_TREADY;

    out_last_V_1_data_out_assign_proc : process(out_last_V_1_payload_A, out_last_V_1_payload_B, out_last_V_1_sel)
    begin
        if ((out_last_V_1_sel = ap_const_logic_1)) then 
            out_last_V_1_data_out <= out_last_V_1_payload_B;
        else 
            out_last_V_1_data_out <= out_last_V_1_payload_A;
        end if; 
    end process;

    out_last_V_1_load_A <= (out_last_V_1_state_cmp_full and not(out_last_V_1_sel_wr));
    out_last_V_1_load_B <= (out_last_V_1_state_cmp_full and out_last_V_1_sel_wr);
    out_last_V_1_sel <= out_last_V_1_sel_rd;
    out_last_V_1_state_cmp_full <= '0' when (out_last_V_1_state = ap_const_lv2_1) else '1';
    out_last_V_1_vld_in <= grp_mnist_lstm_fu_456_out_r_TVALID;
    out_last_V_1_vld_out <= out_last_V_1_state(0);
    out_r_TDATA <= out_data_V_1_data_out;
    out_r_TDEST <= out_dest_V_1_data_out;
    out_r_TID <= out_id_V_1_data_out;
    out_r_TKEEP <= out_keep_V_1_data_out;
    out_r_TLAST <= out_last_V_1_data_out;
    out_r_TSTRB <= out_strb_V_1_data_out;
    out_r_TUSER <= out_user_V_1_data_out;
    out_r_TVALID <= out_dest_V_1_state(0);
    out_strb_V_1_ack_in <= out_strb_V_1_state(1);
    out_strb_V_1_ack_out <= out_r_TREADY;

    out_strb_V_1_data_out_assign_proc : process(out_strb_V_1_payload_A, out_strb_V_1_payload_B, out_strb_V_1_sel)
    begin
        if ((out_strb_V_1_sel = ap_const_logic_1)) then 
            out_strb_V_1_data_out <= out_strb_V_1_payload_B;
        else 
            out_strb_V_1_data_out <= out_strb_V_1_payload_A;
        end if; 
    end process;

    out_strb_V_1_load_A <= (out_strb_V_1_state_cmp_full and not(out_strb_V_1_sel_wr));
    out_strb_V_1_load_B <= (out_strb_V_1_state_cmp_full and out_strb_V_1_sel_wr);
    out_strb_V_1_sel <= out_strb_V_1_sel_rd;
    out_strb_V_1_state_cmp_full <= '0' when (out_strb_V_1_state = ap_const_lv2_1) else '1';
    out_strb_V_1_vld_in <= grp_mnist_lstm_fu_456_out_r_TVALID;
    out_strb_V_1_vld_out <= out_strb_V_1_state(0);
    out_user_V_1_ack_in <= out_user_V_1_state(1);
    out_user_V_1_ack_out <= out_r_TREADY;

    out_user_V_1_data_out_assign_proc : process(out_user_V_1_payload_A, out_user_V_1_payload_B, out_user_V_1_sel)
    begin
        if ((out_user_V_1_sel = ap_const_logic_1)) then 
            out_user_V_1_data_out <= out_user_V_1_payload_B;
        else 
            out_user_V_1_data_out <= out_user_V_1_payload_A;
        end if; 
    end process;

    out_user_V_1_load_A <= (out_user_V_1_state_cmp_full and not(out_user_V_1_sel_wr));
    out_user_V_1_load_B <= (out_user_V_1_state_cmp_full and out_user_V_1_sel_wr);
    out_user_V_1_sel <= out_user_V_1_sel_rd;
    out_user_V_1_state_cmp_full <= '0' when (out_user_V_1_state = ap_const_lv2_1) else '1';
    out_user_V_1_vld_in <= grp_mnist_lstm_fu_456_out_r_TVALID;
    out_user_V_1_vld_out <= out_user_V_1_state(0);
end behav;
