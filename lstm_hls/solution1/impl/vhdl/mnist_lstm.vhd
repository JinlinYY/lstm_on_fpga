-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mnist_lstm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of mnist_lstm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal img_dat_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal img_dat_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mnist_lstm_Loop_1_pr_U0_ap_start : STD_LOGIC;
    signal mnist_lstm_Loop_1_pr_U0_ap_done : STD_LOGIC;
    signal mnist_lstm_Loop_1_pr_U0_ap_continue : STD_LOGIC;
    signal mnist_lstm_Loop_1_pr_U0_ap_idle : STD_LOGIC;
    signal mnist_lstm_Loop_1_pr_U0_ap_ready : STD_LOGIC;
    signal mnist_lstm_Loop_1_pr_U0_in_r_TREADY : STD_LOGIC;
    signal mnist_lstm_Loop_1_pr_U0_img_dat_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mnist_lstm_Loop_1_pr_U0_img_dat_ce0 : STD_LOGIC;
    signal mnist_lstm_Loop_1_pr_U0_img_dat_we0 : STD_LOGIC;
    signal mnist_lstm_Loop_1_pr_U0_img_dat_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_img_dat : STD_LOGIC;
    signal mnist_lstm_Loop_1_pr_U0_img_dat_full_n : STD_LOGIC;
    signal infer_U0_ap_start : STD_LOGIC;
    signal infer_U0_ap_done : STD_LOGIC;
    signal infer_U0_ap_continue : STD_LOGIC;
    signal infer_U0_ap_idle : STD_LOGIC;
    signal infer_U0_ap_ready : STD_LOGIC;
    signal infer_U0_start_out : STD_LOGIC;
    signal infer_U0_start_write : STD_LOGIC;
    signal infer_U0_input_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal infer_U0_input_r_ce0 : STD_LOGIC;
    signal infer_U0_res_0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal infer_U0_res_0_out_write : STD_LOGIC;
    signal infer_U0_res_1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal infer_U0_res_1_out_write : STD_LOGIC;
    signal mnist_lstm_Loop_2_pr_U0_ap_start : STD_LOGIC;
    signal mnist_lstm_Loop_2_pr_U0_ap_done : STD_LOGIC;
    signal mnist_lstm_Loop_2_pr_U0_ap_continue : STD_LOGIC;
    signal mnist_lstm_Loop_2_pr_U0_ap_idle : STD_LOGIC;
    signal mnist_lstm_Loop_2_pr_U0_ap_ready : STD_LOGIC;
    signal mnist_lstm_Loop_2_pr_U0_res_0_read : STD_LOGIC;
    signal mnist_lstm_Loop_2_pr_U0_res_1_read : STD_LOGIC;
    signal mnist_lstm_Loop_2_pr_U0_out_r_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mnist_lstm_Loop_2_pr_U0_out_r_TVALID : STD_LOGIC;
    signal mnist_lstm_Loop_2_pr_U0_out_r_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal mnist_lstm_Loop_2_pr_U0_out_r_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal mnist_lstm_Loop_2_pr_U0_out_r_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mnist_lstm_Loop_2_pr_U0_out_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal mnist_lstm_Loop_2_pr_U0_out_r_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal mnist_lstm_Loop_2_pr_U0_out_r_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal img_dat_i_full_n : STD_LOGIC;
    signal img_dat_t_empty_n : STD_LOGIC;
    signal res_0_c_full_n : STD_LOGIC;
    signal res_0_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal res_0_c_empty_n : STD_LOGIC;
    signal res_1_c_full_n : STD_LOGIC;
    signal res_1_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal res_1_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal mnist_lstm_Loop_1_pr_U0_start_full_n : STD_LOGIC;
    signal mnist_lstm_Loop_1_pr_U0_start_write : STD_LOGIC;
    signal start_for_mnist_lstm_Loop_2_pr_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mnist_lstm_Loop_2_pr_U0_full_n : STD_LOGIC;
    signal start_for_mnist_lstm_Loop_2_pr_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mnist_lstm_Loop_2_pr_U0_empty_n : STD_LOGIC;
    signal mnist_lstm_Loop_2_pr_U0_start_full_n : STD_LOGIC;
    signal mnist_lstm_Loop_2_pr_U0_start_write : STD_LOGIC;

    component mnist_lstm_Loop_1_pr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_TVALID : IN STD_LOGIC;
        in_r_TREADY : OUT STD_LOGIC;
        in_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        in_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_dat_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_dat_ce0 : OUT STD_LOGIC;
        img_dat_we0 : OUT STD_LOGIC;
        img_dat_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        res_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_0_out_full_n : IN STD_LOGIC;
        res_0_out_write : OUT STD_LOGIC;
        res_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_1_out_full_n : IN STD_LOGIC;
        res_1_out_write : OUT STD_LOGIC );
    end component;


    component mnist_lstm_Loop_2_pr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        res_0_empty_n : IN STD_LOGIC;
        res_0_read : OUT STD_LOGIC;
        res_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        res_1_empty_n : IN STD_LOGIC;
        res_1_read : OUT STD_LOGIC;
        out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        out_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mnist_lstm_img_dat IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_mnist_lciv IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    img_dat_U : component mnist_lstm_img_dat
    generic map (
        DataWidth => 32,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => mnist_lstm_Loop_1_pr_U0_img_dat_address0,
        i_ce0 => mnist_lstm_Loop_1_pr_U0_img_dat_ce0,
        i_we0 => mnist_lstm_Loop_1_pr_U0_img_dat_we0,
        i_d0 => mnist_lstm_Loop_1_pr_U0_img_dat_d0,
        i_q0 => img_dat_i_q0,
        t_address0 => infer_U0_input_r_address0,
        t_ce0 => infer_U0_input_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => img_dat_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => img_dat_i_full_n,
        i_write => mnist_lstm_Loop_1_pr_U0_ap_done,
        t_empty_n => img_dat_t_empty_n,
        t_read => infer_U0_ap_ready);

    mnist_lstm_Loop_1_pr_U0 : component mnist_lstm_Loop_1_pr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => mnist_lstm_Loop_1_pr_U0_ap_start,
        ap_done => mnist_lstm_Loop_1_pr_U0_ap_done,
        ap_continue => mnist_lstm_Loop_1_pr_U0_ap_continue,
        ap_idle => mnist_lstm_Loop_1_pr_U0_ap_idle,
        ap_ready => mnist_lstm_Loop_1_pr_U0_ap_ready,
        in_r_TDATA => in_r_TDATA,
        in_r_TVALID => in_r_TVALID,
        in_r_TREADY => mnist_lstm_Loop_1_pr_U0_in_r_TREADY,
        in_r_TSTRB => in_r_TSTRB,
        in_r_TKEEP => in_r_TKEEP,
        in_r_TUSER => in_r_TUSER,
        in_r_TLAST => in_r_TLAST,
        in_r_TID => in_r_TID,
        in_r_TDEST => in_r_TDEST,
        img_dat_address0 => mnist_lstm_Loop_1_pr_U0_img_dat_address0,
        img_dat_ce0 => mnist_lstm_Loop_1_pr_U0_img_dat_ce0,
        img_dat_we0 => mnist_lstm_Loop_1_pr_U0_img_dat_we0,
        img_dat_d0 => mnist_lstm_Loop_1_pr_U0_img_dat_d0);

    infer_U0 : component infer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => infer_U0_ap_start,
        start_full_n => start_for_mnist_lstm_Loop_2_pr_U0_full_n,
        ap_done => infer_U0_ap_done,
        ap_continue => infer_U0_ap_continue,
        ap_idle => infer_U0_ap_idle,
        ap_ready => infer_U0_ap_ready,
        start_out => infer_U0_start_out,
        start_write => infer_U0_start_write,
        input_r_address0 => infer_U0_input_r_address0,
        input_r_ce0 => infer_U0_input_r_ce0,
        input_r_q0 => img_dat_t_q0,
        res_0_out_din => infer_U0_res_0_out_din,
        res_0_out_full_n => res_0_c_full_n,
        res_0_out_write => infer_U0_res_0_out_write,
        res_1_out_din => infer_U0_res_1_out_din,
        res_1_out_full_n => res_1_c_full_n,
        res_1_out_write => infer_U0_res_1_out_write);

    mnist_lstm_Loop_2_pr_U0 : component mnist_lstm_Loop_2_pr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => mnist_lstm_Loop_2_pr_U0_ap_start,
        ap_done => mnist_lstm_Loop_2_pr_U0_ap_done,
        ap_continue => mnist_lstm_Loop_2_pr_U0_ap_continue,
        ap_idle => mnist_lstm_Loop_2_pr_U0_ap_idle,
        ap_ready => mnist_lstm_Loop_2_pr_U0_ap_ready,
        res_0_dout => res_0_c_dout,
        res_0_empty_n => res_0_c_empty_n,
        res_0_read => mnist_lstm_Loop_2_pr_U0_res_0_read,
        res_1_dout => res_1_c_dout,
        res_1_empty_n => res_1_c_empty_n,
        res_1_read => mnist_lstm_Loop_2_pr_U0_res_1_read,
        out_r_TDATA => mnist_lstm_Loop_2_pr_U0_out_r_TDATA,
        out_r_TVALID => mnist_lstm_Loop_2_pr_U0_out_r_TVALID,
        out_r_TREADY => out_r_TREADY,
        out_r_TKEEP => mnist_lstm_Loop_2_pr_U0_out_r_TKEEP,
        out_r_TSTRB => mnist_lstm_Loop_2_pr_U0_out_r_TSTRB,
        out_r_TUSER => mnist_lstm_Loop_2_pr_U0_out_r_TUSER,
        out_r_TLAST => mnist_lstm_Loop_2_pr_U0_out_r_TLAST,
        out_r_TID => mnist_lstm_Loop_2_pr_U0_out_r_TID,
        out_r_TDEST => mnist_lstm_Loop_2_pr_U0_out_r_TDEST);

    res_0_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => infer_U0_res_0_out_din,
        if_full_n => res_0_c_full_n,
        if_write => infer_U0_res_0_out_write,
        if_dout => res_0_c_dout,
        if_empty_n => res_0_c_empty_n,
        if_read => mnist_lstm_Loop_2_pr_U0_res_0_read);

    res_1_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => infer_U0_res_1_out_din,
        if_full_n => res_1_c_full_n,
        if_write => infer_U0_res_1_out_write,
        if_dout => res_1_c_dout,
        if_empty_n => res_1_c_empty_n,
        if_read => mnist_lstm_Loop_2_pr_U0_res_1_read);

    start_for_mnist_lciv_U : component start_for_mnist_lciv
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_mnist_lstm_Loop_2_pr_U0_din,
        if_full_n => start_for_mnist_lstm_Loop_2_pr_U0_full_n,
        if_write => infer_U0_start_write,
        if_dout => start_for_mnist_lstm_Loop_2_pr_U0_dout,
        if_empty_n => start_for_mnist_lstm_Loop_2_pr_U0_empty_n,
        if_read => mnist_lstm_Loop_2_pr_U0_ap_ready);




    ap_channel_done_img_dat <= mnist_lstm_Loop_1_pr_U0_ap_done;
    ap_done <= mnist_lstm_Loop_2_pr_U0_ap_done;
    ap_idle <= (mnist_lstm_Loop_2_pr_U0_ap_idle and mnist_lstm_Loop_1_pr_U0_ap_idle and infer_U0_ap_idle and (img_dat_t_empty_n xor ap_const_logic_1));
    ap_ready <= mnist_lstm_Loop_1_pr_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= mnist_lstm_Loop_2_pr_U0_ap_done;
    ap_sync_ready <= mnist_lstm_Loop_1_pr_U0_ap_ready;
    in_r_TREADY <= mnist_lstm_Loop_1_pr_U0_in_r_TREADY;
    infer_U0_ap_continue <= ap_const_logic_1;
    infer_U0_ap_start <= img_dat_t_empty_n;
    mnist_lstm_Loop_1_pr_U0_ap_continue <= img_dat_i_full_n;
    mnist_lstm_Loop_1_pr_U0_ap_start <= ap_start;
    mnist_lstm_Loop_1_pr_U0_img_dat_full_n <= img_dat_i_full_n;
    mnist_lstm_Loop_1_pr_U0_start_full_n <= ap_const_logic_1;
    mnist_lstm_Loop_1_pr_U0_start_write <= ap_const_logic_0;
    mnist_lstm_Loop_2_pr_U0_ap_continue <= ap_continue;
    mnist_lstm_Loop_2_pr_U0_ap_start <= start_for_mnist_lstm_Loop_2_pr_U0_empty_n;
    mnist_lstm_Loop_2_pr_U0_start_full_n <= ap_const_logic_1;
    mnist_lstm_Loop_2_pr_U0_start_write <= ap_const_logic_0;
    out_r_TDATA <= mnist_lstm_Loop_2_pr_U0_out_r_TDATA;
    out_r_TDEST <= mnist_lstm_Loop_2_pr_U0_out_r_TDEST;
    out_r_TID <= mnist_lstm_Loop_2_pr_U0_out_r_TID;
    out_r_TKEEP <= mnist_lstm_Loop_2_pr_U0_out_r_TKEEP;
    out_r_TLAST <= mnist_lstm_Loop_2_pr_U0_out_r_TLAST;
    out_r_TSTRB <= mnist_lstm_Loop_2_pr_U0_out_r_TSTRB;
    out_r_TUSER <= mnist_lstm_Loop_2_pr_U0_out_r_TUSER;
    out_r_TVALID <= mnist_lstm_Loop_2_pr_U0_out_r_TVALID;
    start_for_mnist_lstm_Loop_2_pr_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
